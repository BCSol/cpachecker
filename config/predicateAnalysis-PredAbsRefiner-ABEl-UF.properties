# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for the Large-Block Encoding (LBE) case.
# ----------------------------------------------------------------------

#include includes/predicateAnalysis-ABEl.properties

#include includes/predicateAnalysis-PredAbsRefiner.properties

staticRefiner.maxBackscanPathAssumes = 4

analysis.useCBMC = false

cegar.refiner = cpa.predicate.PredicateRefiner

# Additional options to enable bit-precise analysis
cpa.predicate.replaceBitvectorWithRationalAndFunctionTheory = false
cpa.predicate.ignoreExtractConcat = false

# Using 64-bit Linux machine model
analysis.machineModel = LINUX64

# Excluding malloc, __kmalloc and kzalloc from nondet funcions
cpa.predicate.nondetFunctions = sscanf,random,ldv_undef_int,ldv_undef_ptr,ldv_undef_ulong

# Successful memory allocation functions
cpa.predicate.memoryAllocationFunctions = malloc,kmalloc,__kmalloc,ldv_successful_malloc
cpa.predicate.memoryAllocationFunctionsWithZeroing = kzalloc,ldv_successful_zalloc
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# Options enabling preliminary CFA transformations required by the analysis with UF
cfa.simplifyPointerExpressions = false
cfa.transformUnsizedArrays = true
cfa.transformPointerArithmetic = true
cfa.transformArrows = true
cfa.transformStarAmper = true
cfa.transformFunctionPointers = true
cfa.ignoreConst = true
cfa.ignoreVolatile = true

# Options enabling PathFormulaWithUF and appropriate address disjointness constraints
cpa.predicate.pointerAnalysisWithUFs =  true
cpa.predicate.refinement.pointerAnalysisWithUFs = true

# Enbaling merge operator i.e. Adjustable Block Encoding (ABE)
cpa.predicate.merge = ABE

# CFA generation option to ignore casts in assignments of the form (t *v = (t *) malloc(...))
cfa.ignoreAllocCasts = true

# New heuristics: type detection and void* tracking
cpa.predicate.revealAllocationTypeFromLhs = true
cpa.predicate.deferUntypedAllocations = true

# New heuristic for poorly cillified files: pre-populate small structures with all their fields
cpa.predicate.maxPreFilledAllocationSize = 64

# Skip recursion as in default LDV configuration
analysis.summaryEdges = true
analysis.functionPointerCalls = true
cpa.callstack.skipRecursion = true

# Disable global wall time limit
cpa.conditions.global.time.wall = -1
