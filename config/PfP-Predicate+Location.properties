# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = dfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

cfa.useMultiEdges=true

# enable analysis with CPA enabler
analysis.algorithm.analysisWithEnabler =true

# enable refinement
analysis.algorithm.CEGAR = true

cegar.refiner = cpa.predicate.PredicateRefiner
# cpa.predicate.refinement.performInitialStaticRefinement = true

# cpa structure
# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

 CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA


# configuration of predicate analysis
 enabledanalysis.enablerCPA = PREDICATE
cpa.composite.inCPAEnabledAnalysis = true
cpa.arg.inCPAEnabledAnalysis = true
cpa.arg.deleteInCPAEnabledAnalysis = false
cpa.predicate.blk.alwaysAtJoin = false

# set resource limits
limits.time.cpu = 900s

# output configuration
statistics.print = false

# configuration part for writing transformed program
 cpa.predicate.blk.alwaysAtEndOfProgram = true
# enable writing of transformation of arg to c program
#  cpa.arg.addInclude = false
#  cpa.arg.dumpARG = true
#  cpa.arg.dumpFile = arg.c
#  cpa.arg.disableRVARGSimplification = true
#  analysis.postProcessing = true

