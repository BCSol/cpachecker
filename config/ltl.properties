# analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
# specification = specification/default.spc

# Enable MultiEdges, this gives a little bit of performance.
cpa.composite.aggregateBasicBlocks = true
    
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
# cegar.refiner = cpa.predicate.SlicingAbstractionsRefiner

# SlicingAbstractionsRefiner depends on this
cpa.arg.keepCoveredStatesInReached = true

# SlicingAbstractions does not use BDDs
cpa.predicate.abstraction.type = FORMULA

# Disable useless caches
cpa.predicate.abs.useCache = false
cpa.predicate.blk.useCache = false

# Disable invariant export, these contain the raw ASTs and might be very large.
cpa.predicate.invariants.export = false

# Kojak is effectively a global one time refinement:
# cegar.globalRefinement = true
# cpa.automaton.breakOnTargetState = 0

# We want to merge back instead of relying on coverage:
cpa.arg.mergeOnWrappedSubsumption = true

# Special settings for things that break if the ARG contains loops:
# cpa.predicate.refinement.graphblockformulastrategy = true
# For counterexample check this would be needed:
# counterexample.ambigiousARG = true

# abstraction after every post operation (similar to SBE)
cpa.predicate.blk.threshold = 1


# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true

