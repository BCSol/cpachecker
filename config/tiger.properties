# ##########################
# CPAchecker configuration #
# ##########################

# tiger with predicate analysis, LBE, test-goal annotations, and power set

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# Enable MultiEdges, this gives a little bit of performance.
# Do not switch on yet! It will cause wrong results.
cpa.composite.aggregateBasicBlocks=false

# Do not split on target states if Omega states are used
#   (would cause a bug in CPAchecker that is not yet fixed for this case)
cpa.automaton.splitOnTargetStatesToInactive=false
cpa.automaton.adjustAutomatonTransitions=true

cpa.automaton.prec.onHandledTarget=BOTTOM

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

# predicate Analysis
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.ignoreIrrelevantVariables = true
# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true
cpa.predicate.useNondetFlags = true
# cpa.predicate.refinement.maxPathsPerCounterexample=10000000 for z3
cpa.predicate.refinement.maxPathsPerCounterexample=1
# Reuse solver information between different partitions.
cpa.predicate.reuseSolverFromGlobalInfo=true

# Setting the option to make memory allocations always return correct addresses
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# New heuristic for cillified files: pre-populate small structures with all their fields
cpa.predicate.maxPreFilledAllocationSize = 0

# Share predicates in their corresponding scope
cpa.predicate.precision.sharing=SCOPE
cpa.predicate.refinement.predicateBasisStrategy=ALL

# Use CEGAR
# analysis.algorithm.CEGAR = true
# cegar.refiner = cpa.predicate.PredicateRefiner

# Use TGAR
#include includes/tiger-internal-algorithm-tgar.properties

# Use LBE
cpa.predicate.blk.alwaysAtFunctions = true                                      
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.blk.alwaysAtJoin      = true

analysis.checkCounterexamples = false

# Z3 necessary for test-case generation using multi-property checking
# solver.solver=Z3
solver.solver=SMTINTERPOL

# ########################
# CPAtiger configuration #
# ########################

# Use the Tiger Algorithm
analysis.algorithm.tiger = true
analysis.algorithm.tigerdc = true

# enable test-goal annotations
#include includes/tiger-annotating.properties

# time options
tiger.limitsPerGoal.time.cpu = 20
tiger.limitsPerGoal.time.cpu.increment = 10
# Additional resource limits.
limits.time.cpu = 3600s

# multi-property analysis options
tiger.useMarkingAutomata = true
tgar.comparator = DeeperLevelFirstComparator
analysis.mpa.partition.operator = KThenNoneOperator
analysis.mpa.partition.property.time.cpu = 30s
analysis.mpa.partition.k = 1
cpa.automaton.breakOnTargetState = 1

# test interface
tiger.inputInterface = "x,y,z"
tiger.outputInterface = "o"

# reuse options
tiger.reusePredicates = false
tiger.reuseARG = false

tiger.checkCoverage = true
tiger.numberOfTestGoalsPerRun = 1
tiger.allCoveredGoalsPerTestCase = false
tiger.printLabels = true
tiger.useComposite=true
tiger.usePowerset=true

# the file is in the standard config directory
# tiger.algorithmConfigurationFile = includes/tiger-internal-algorithm---pred-refiner.properties

tiger.fqlQuery = COVER "EDGES(ID)*".EDGES(SETMINUS(@BASICBLOCKENTRY, UNION(@FUNC(cleanup), @FUNC(select_features), @FUNC(select_helpers), @FUNC(valid_product), @FUNC(setup), @FUNC(select_one), @FUNC(setup))))."EDGES(ID)*"
