ARGCPA.cpa = cpa.composite.CompositeCPA
cpa = cpa.arg.ARGCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA


# Enable MultiEdges, this gives a little bit of performance.
# cfa.useMultiEdges = true
cfa.useMultiEdges = true

# Setting the option to make memory allocations always return correct addresses
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# New heuristic for cillified files: pre-populate small structures with all their fields
cpa.predicate.maxPreFilledAllocationSize = 0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops = true

cpa.predicate.useNondetFlags = true
# TODO turn it to true again ?
cpa.predicate.ignoreIrrelevantVariables = false
cpa.predicate.encodeBitvectorAs = INTEGER

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.predicate.PredicateRefiner

# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true

# Use the Tiger Algorithm
analysis.algorithm.tiger = true

# tiger.printARGperGoal = true

tiger.fqlQuery =COVER "EDGES(ID)*".EDGES(@BASICBLOCKENTRY)."EDGES(ID)*"

tiger.algorithmConfigurationFile =tiger-internal-algorithm---no-refiner.properties

# Additional resource limits.
# limits.time.cpu = 10800s
limits.time.cpu = 3600s
# limits.time.cpu = 900s

# tiger.limitsPerGoal.time.cpu = 20
tiger.limitsPerGoal.time.cpu = 5
# tiger.limitsPerGoal.time.cpu.increment = 20
tiger.limitsPerGoal.time.cpu.increment = 5

tiger.timeoutStrategy = RETRY_AFTER_TIMEOUT
# tiger.inverseOrder = false
# tiger.useOrder = false
