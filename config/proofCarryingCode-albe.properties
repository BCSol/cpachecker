# set up configuration for ART construction 

analysis.useRefinement = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARTCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.art.ARTCPA

ARTCPA.cpa = cpa.composite.CompositeCPA

# all three CPA are needed
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
# only locations with error label, otherwise it cannot be checked during proof checking
specification = config/specification/ErrorLabel.spc

# ALBE set up
cpa.predicat.blk.alwaysAtLoops = true
cpa.predicate.blk.alwaysAtFunctions = true

#threshold != 0 && alwaysAtFunctions && ALBENOINDINVARIANT
# cpa.predicate.cpa.predicate.satCheck = 0

# threshold = 1 -> cartesian = true && threshold !=1 -> cartesian = false
cpa.predicate.abstraction.cartesian = true
cpa.predicate.blk.threshold = 1

# CFA configuration
# only paths to possible error locations are analyzed, may be used
# cfa.removeIrrelevantForErrorLocations = true

# PCC configuration

# enable proof generation/checking
pcc.proofgen.doPCC = true

# specifies the kind of algorithm which should be used
# must be the same for generation and checking
# allowed values are:
# if threshold = 1
#   SBEINDART,   SBENOINDART,  SBEINDINVARIANT,
#   SBENOINDINVARIANT,  SBENOEDGENOINDINVARIANT,  SBENOEDGENOINDINVARIANT2,
# if threshold = 0
#   LBENOINDART, LBENOINDINVARIANT
# always 
#   ALBENOINDART, ALBENOINDINVARIANT, ABENOINDART
pcc.proofgen.algorithm = ALBENOINDART

#specifies the file to which proof is written/from which the proof is read from
# default pccProof.txt
#pcc.proofgen.file = "pccProof.txt"

