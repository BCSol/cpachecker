# --------------------------------------------------------------------
# This configuration file uses value analysis and a predicate analysis
# in parallel. Both analysis perform refinement selection, and inter-
# analysis refinement selection is performed for deciding which
# analysis to refine for a given infeasible error path.
# Bitprecise predicate analysis is used to check counterexamples.
# --------------------------------------------------------------------

#include valueAnalysis.properties

# process
output.disable = true
statistics.memory = false

# specification
specification = specification/sv-comp-reachability.spc

# witness-support and witness-optimization
cpa.arg.errorPath.file                                        = ErrorPath.txt
cpa.arg.errorPath.graphml                                     = witness.graphml
cfa.useMultiEdges                                             = false
cfa.simplifyCfa                                               = false
cfa.allowBranchSwapping                                       = false
counterexample.export.assumptions.includeConstantsForPointers = false

# analyses
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA

# fixed set of option for whole analysis
analysis.checkCounterexamples                         = true
analysis.summaryEdges                                 = true
cpa.callstack.skipVoidRecursion                       = true
cpa.callstack.skipFunctionPointerRecursion            = true
cpa.functionpointer.ignoreUnknownFunctionPointerCalls = true

# options for VA
cpa.value.refinement.prefixPreference = DOMAIN_GOOD_WIDTH_NARROW_SHORT
cpa.value.refinement.restart          = ROOT
cpa.value.blk.abstractionThreshold    = 4096

# options for PA
cpa.predicate.abstraction.computation                   = BOOLEAN
cpa.predicate.blk.alwaysAtJoin                          = true
cpa.predicate.blk.alwaysAtFunctions                     = false
cpa.predicate.blk.alwaysAtLoops                         = true
cpa.predicate.refinement.performInitialStaticRefinement = true
cpa.predicate.refinement.prefixPreference               = PIVOT_DEEP_LONG
cpa.predicate.refinement.restartAfterRefinements        = 1
cpa.predicate.refinement.maxPrefixCount                 = 4
cpa.predicate.memoryAllocationsAlwaysSucceed            = true
cpa.predicate.defaultArrayLength                        = 1
cpa.predicate.precision.sharing                         = SCOPE
# make PA bit-precise
solver.solver                                           = MathSAT5
cpa.predicate.encodeBitvectorAs                         = BITVECTOR
cpa.predicate.encodeFloatAs                             = FLOAT

# options for combination
cegar.refiner                         = cpa.value.refiner.ValueAnalysisDelegatingRefiner
cegar.useRefinementSelection          = true
cegar.maxScoreOfValueDomainRefinement = 2

# counterexample-check
counterexample.checker.config = cex-checks/predicateAnalysis-as-bitprecise-cex-check.properties

# decide on symbolic execution
# decide on counterexample-check when using PA-bitprec
