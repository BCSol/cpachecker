# --------------------------------------------------------------------------
# This configuration file uses SlicingAbstractions for refinement.
# It is similar to "Spitting via Interpolants", while it uses ABEl to
# emulate LBE
# THIS IS STILL EXPERIMENTAL
# --------------------------------------------------------------------------

analysis.algorithm.CEGAR = true
cegar.globalRefinement = true
cegar.refiner = cpa.predicate.SlicingAbstractionsRefiner

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA
cpa.predicate.refinement.graphblockformulastrategy = true
# cpa.predicate.refinement.includePartialInvariants = true

cpa.predicate.refinement.doAbstractionComputation = false
cpa.predicate.refinement.abstractInterpolantOnly = false
# cpa.predicate.abstraction.simplify = true

limits.time.cpu = 900s
cpa.composite.aggregateBasicBlocks = true
# cpa.predicate.blk.threshold = 1
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

cpa.automaton.breakOnTargetState = 0
cpa.arg.mergeIfParentsDiffer= true

specification = specification/default.spc
# specification = specification/ErrorLocation.spc

# Check counterexamples with value analysis
#include includes/cex-check-valueAnalysis.properties
# This option is needed for Slicing Abstractions:
counterexample.ambigiousARG = true

# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

cpa.arg.keepCoveredStatesInReached = true
