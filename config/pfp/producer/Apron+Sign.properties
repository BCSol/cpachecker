# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = dfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

# enable analysis with CPA enabler
analysis.algorithm.analysisWithEnabler =true

# enable refinement
analysis.algorithm.CEGAR = true

cegar.refiner                                 = cpa.apron.refiner.ApronDelegatingRefiner
 cpa.apron.initialPrecisionType              = REFINEABLE_EMPTY

# cpa structure
# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

 CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.apron.ApronCPA, cpa.validvars.ValidVarsCPA, cpa.sign.SignCPA

# configuration of predicate analysis
 enabledanalysis.enablerCPA = APRON
 cpa.apron.splitDisequalities = false
cpa.composite.inCPAEnabledAnalysis = true
cpa.arg.inCPAEnabledAnalysis = true
cpa.arg.deleteInCPAEnabledAnalysis = false

# configuration of sign analysis
# cpa.sign.merge = JOIN
# cpa.sign.stop = SEP


# set resource limits
limits.time.cpu = 900s

# output configuration
statistics.print = false

# configuration part for writing transformed program
# enable writing of transformation of arg to c program
# cpa.arg.addInclude = false
# cpa.arg.dumpARG = true
# cpa.arg.dumpFile = arg.c
# cpa.arg.disableRVARGSimplification = true
# analysis.postProcessing = true
# cpa.arg.deleteInPredicatedAnalysis = true
