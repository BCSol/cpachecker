cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.bdd.BDDCPA


BDDCPA.precision.variableWhitelist = __SELECTED_FEATURE_(\w)*
BDDCPA.precision.trackBooleanVariables = false
BDDCPA.precision.trackIntAddVariables = false
BDDCPA.precision.trackIntEqualVariables = false
BDDCPA.precision.trackVariablesBesidesEqAddBool = false

cpa.value.variableBlacklist = (\w)*__SELECTED_FEATURE_(\w)*

# initially, do not track variables (soft theshold of 0)
# add them to precision using CEGAR & interpolation for the explicit-value domain
# if a variable then exceeds the hard threshold of 12 (unique) assignments, then do no longer track the variable
# cpa.conditions.path.condition                 = AssignmentsInPathCondition
# cpa.conditions.path.assignments.softThreshold = 20 
# cpa.conditions.path.assignments.hardThreshold = 20 
# cpa.value.refiner.performInitialStaticRefinement = true


# Enable MultiEdges, this gives a little bit of performance.
# cfa.useMultiEdges = true
cfa.useMultiEdges = false

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

# Use the Tiger Algorithm
analysis.algorithm.tiger = true

# Additional resource limits.
limits.time.cpu = 3600s

tiger.fqlQuery =COVER "EDGES(ID)*".EDGES(@BASICBLOCKENTRY)."EDGES(ID)*"
tiger.timeoutStrategy = RETRY_AFTER_TIMEOUT
tiger.limitsPerGoal.time.cpu = 900
tiger.limitsPerGoal.time.cpu.increment = 100
tiger.checkCoverage = true
# tiger.reusePredicates = false
# tiger.reuseARG = false

tiger.algorithmConfigurationFile =tiger-internal-algorithm---no-refiner.properties
