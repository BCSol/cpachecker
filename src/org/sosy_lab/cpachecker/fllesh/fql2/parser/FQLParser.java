
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 04 12:19:07 GMT+01:00 2010
//----------------------------------------------------

package org.sosy_lab.cpachecker.fllesh.fql2.parser;

import java_cup.runtime.*;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.Edges;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.FQLSpecification;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.CoverageSpecification;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Quotation;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Concatenation;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.PathPattern;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Identity;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.File;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.BasicBlockEntry;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.ConditionEdge;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.DecisionEdge;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.ConditionGraph;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Line;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.FunctionCalls;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Column;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Function;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Label;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.FunctionCall;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.FunctionEntry;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.FunctionExit;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.EnclosingScopes;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Compose;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Expression;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.RegularExpression;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Filter;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.SetMinus;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Intersection;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Union;
import org.sosy_lab.cpachecker.fllesh.fql.frontend.ast.filter.Complement;
import java.io.Reader;
import java.io.InputStream;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 04 12:19:07 GMT+01:00 2010
  */
public class FQLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FQLParser() {super();}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\006" +
    "\004\000\002\007\002\000\002\007\004\000\002\003\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\004\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\005" +
    "\006\000\002\010\003\000\002\010\006\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\006\000" +
    "\002\010\010\000\002\011\003\000\002\011\006\000\002" +
    "\011\006\000\002\011\003\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\003" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\060\005\001\002\000\006\002\ufffe\061" +
    "\162\001\002\000\010\004\012\047\014\056\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\006\004\150\047\014\001\002\000\014\002\ufffc\005\ufffc" +
    "\053\ufffc\054\ufffc\061\ufffc\001\002\000\010\004\012\047" +
    "\014\056\010\001\002\000\012\002\uffff\053\140\054\141" +
    "\061\uffff\001\002\000\004\004\015\001\002\000\060\007" +
    "\043\010\034\011\026\012\032\013\040\014\017\015\016" +
    "\016\033\017\023\020\036\021\031\022\046\023\020\024" +
    "\025\025\030\026\021\027\041\030\042\031\037\032\035" +
    "\033\022\034\045\035\024\001\002\000\004\004\135\001" +
    "\002\000\004\004\132\001\002\000\004\004\127\001\002" +
    "\000\006\005\uffdb\006\uffdb\001\002\000\004\004\122\001" +
    "\002\000\006\005\uffe2\006\uffe2\001\002\000\004\004\115" +
    "\001\002\000\006\005\uffdd\006\uffdd\001\002\000\004\004" +
    "\112\001\002\000\006\005\ufff1\006\ufff1\001\002\000\006" +
    "\005\uffdc\006\uffdc\001\002\000\004\004\107\001\002\000" +
    "\006\005\uffe7\006\uffe7\001\002\000\004\004\104\001\002" +
    "\000\004\004\101\001\002\000\004\004\074\001\002\000" +
    "\004\004\071\001\002\000\004\004\064\001\002\000\004" +
    "\004\061\001\002\000\006\005\uffda\006\uffda\001\002\000" +
    "\004\004\056\001\002\000\006\005\uffea\006\uffea\001\002" +
    "\000\004\005\055\001\002\000\004\004\052\001\002\000" +
    "\004\004\047\001\002\000\004\063\050\001\002\000\004" +
    "\005\051\001\002\000\006\005\uffdf\006\uffdf\001\002\000" +
    "\060\007\043\010\034\011\026\012\032\013\040\014\017" +
    "\015\016\016\033\017\023\020\036\021\031\022\046\023" +
    "\020\024\025\025\030\026\021\027\041\030\042\031\037" +
    "\032\035\033\022\034\045\035\024\001\002\000\004\005" +
    "\054\001\002\000\006\005\uffec\006\uffec\001\002\000\020" +
    "\002\ufff2\005\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\061" +
    "\ufff2\001\002\000\060\007\043\010\034\011\026\012\032" +
    "\013\040\014\017\015\016\016\033\017\023\020\036\021" +
    "\031\022\046\023\020\024\025\025\030\026\021\027\041" +
    "\030\042\031\037\032\035\033\022\034\045\035\024\001" +
    "\002\000\004\005\060\001\002\000\006\005\ufff0\006\ufff0" +
    "\001\002\000\004\064\062\001\002\000\004\005\063\001" +
    "\002\000\006\005\uffe6\006\uffe6\001\002\000\060\007\043" +
    "\010\034\011\026\012\032\013\040\014\017\015\016\016" +
    "\033\017\023\020\036\021\031\022\046\023\020\024\025" +
    "\025\030\026\021\027\041\030\042\031\037\032\035\033" +
    "\022\034\045\035\024\001\002\000\004\006\066\001\002" +
    "\000\060\007\043\010\034\011\026\012\032\013\040\014" +
    "\017\015\016\016\033\017\023\020\036\021\031\022\046" +
    "\023\020\024\025\025\030\026\021\027\041\030\042\031" +
    "\037\032\035\033\022\034\045\035\024\001\002\000\004" +
    "\005\070\001\002\000\006\005\uffef\006\uffef\001\002\000" +
    "\004\062\072\001\002\000\004\005\073\001\002\000\006" +
    "\005\uffe1\006\uffe1\001\002\000\060\007\043\010\034\011" +
    "\026\012\032\013\040\014\017\015\016\016\033\017\023" +
    "\020\036\021\031\022\046\023\020\024\025\025\030\026" +
    "\021\027\041\030\042\031\037\032\035\033\022\034\045" +
    "\035\024\001\002\000\004\006\076\001\002\000\060\007" +
    "\043\010\034\011\026\012\032\013\040\014\017\015\016" +
    "\016\033\017\023\020\036\021\031\022\046\023\020\024" +
    "\025\025\030\026\021\027\041\030\042\031\037\032\035" +
    "\033\022\034\045\035\024\001\002\000\004\005\100\001" +
    "\002\000\006\005\uffee\006\uffee\001\002\000\004\063\102" +
    "\001\002\000\004\005\103\001\002\000\006\005\uffe9\006" +
    "\uffe9\001\002\000\004\062\105\001\002\000\004\005\106" +
    "\001\002\000\006\005\uffe3\006\uffe3\001\002\000\004\062" +
    "\110\001\002\000\004\005\111\001\002\000\006\005\uffe0" +
    "\006\uffe0\001\002\000\004\064\113\001\002\000\004\005" +
    "\114\001\002\000\006\005\uffe8\006\uffe8\001\002\000\060" +
    "\007\043\010\034\011\026\012\032\013\040\014\017\015" +
    "\016\016\033\017\023\020\036\021\031\022\046\023\020" +
    "\024\025\025\030\026\021\027\041\030\042\031\037\032" +
    "\035\033\022\034\045\035\024\001\002\000\004\006\117" +
    "\001\002\000\060\007\043\010\034\011\026\012\032\013" +
    "\040\014\017\015\016\016\033\017\023\020\036\021\031" +
    "\022\046\023\020\024\025\025\030\026\021\027\041\030" +
    "\042\031\037\032\035\033\022\034\045\035\024\001\002" +
    "\000\004\005\121\001\002\000\006\005\uffeb\006\uffeb\001" +
    "\002\000\060\007\043\010\034\011\026\012\032\013\040" +
    "\014\017\015\016\016\033\017\023\020\036\021\031\022" +
    "\046\023\020\024\025\025\030\026\021\027\041\030\042" +
    "\031\037\032\035\033\022\034\045\035\024\001\002\000" +
    "\004\006\124\001\002\000\060\007\043\010\034\011\026" +
    "\012\032\013\040\014\017\015\016\016\033\017\023\020" +
    "\036\021\031\022\046\023\020\024\025\025\030\026\021" +
    "\027\041\030\042\031\037\032\035\033\022\034\045\035" +
    "\024\001\002\000\004\005\126\001\002\000\006\005\uffed" +
    "\006\uffed\001\002\000\004\063\130\001\002\000\004\005" +
    "\131\001\002\000\006\005\uffde\006\uffde\001\002\000\004" +
    "\062\133\001\002\000\004\005\134\001\002\000\006\005" +
    "\uffe5\006\uffe5\001\002\000\004\062\136\001\002\000\004" +
    "\005\137\001\002\000\006\005\uffe4\006\uffe4\001\002\000" +
    "\010\004\012\047\014\056\010\001\002\000\010\004\012" +
    "\047\014\056\010\001\002\000\014\002\ufff8\005\ufff8\053" +
    "\ufff8\054\ufff8\061\ufff8\001\002\000\014\002\ufff9\005\ufff9" +
    "\053\ufff9\054\ufff9\061\ufff9\001\002\000\010\005\145\053" +
    "\140\054\141\001\002\000\014\002\ufffb\005\ufffb\053\ufffb" +
    "\054\ufffb\061\ufffb\001\002\000\012\053\153\054\154\055" +
    "\155\056\160\001\002\000\016\002\ufff7\005\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\001\002\000\006\004\150\047" +
    "\014\001\002\000\012\005\152\053\153\054\154\055\155" +
    "\001\002\000\016\002\ufff6\005\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\001\002\000\006\004\150\047\014\001\002" +
    "\000\006\004\150\047\014\001\002\000\016\002\ufff3\005" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\016" +
    "\002\ufff4\005\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001" +
    "\002\000\016\002\ufff5\005\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\001\002\000\014\002\ufffa\005\ufffa\053\ufffa\054" +
    "\ufffa\061\ufffa\001\002\000\004\002\000\001\002\000\006" +
    "\004\150\047\014\001\002\000\012\002\ufffd\053\153\054" +
    "\154\055\155\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\005\006\003\001\001\000\004\007" +
    "\160\001\001\000\006\003\012\005\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\145\005\146\001" +
    "\001\000\002\001\001\000\006\003\143\005\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\043\011" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\052\011\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\056\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\064\011\026" +
    "\001\001\000\002\001\001\000\006\010\066\011\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\074\011" +
    "\026\001\001\000\002\001\001\000\006\010\076\011\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\115\011\026\001" +
    "\001\000\002\001\001\000\006\010\117\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\122\011" +
    "\026\001\001\000\002\001\001\000\006\010\124\011\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\142\005\010" +
    "\001\001\000\006\003\141\005\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\150\005" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\156\005\146\001\001\000\006\004\155\005\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\162\005" +
    "\146\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public FQLParser(String pQueryString) {
      this(new StringReader(pQueryString));
	}

	public FQLParser(Reader pReader) {
	  this(new FQLLexer(pReader));
	}

	public FQLParser(InputStream pInputStream) {
	  this(new FQLLexer(pInputStream));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FQLParser$actions {



  private final FQLParser parser;

  /** Constructor */
  CUP$FQLParser$actions(FQLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FQLParser$do_action(
    int                        CUP$FQLParser$act_num,
    java_cup.runtime.lr_parser CUP$FQLParser$parser,
    java.util.Stack            CUP$FQLParser$stack,
    int                        CUP$FQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FQLParser$result;

      /* select the action based on the action number */
      switch (CUP$FQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Filter_Function ::= TOK_CONDITIONGRAPH 
            {
              Object RESULT =null;
		
							RESULT = ConditionGraph.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Filter_Function ::= TOK_DECISIONEDGE 
            {
              Object RESULT =null;
		
							RESULT = DecisionEdge.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Filter_Function ::= TOK_CONDITIONEDGE 
            {
              Object RESULT =null;
		
							RESULT = ConditionEdge.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Filter_Function ::= TOK_BASICBLOCKENTRY 
            {
              Object RESULT =null;
		
							RESULT = BasicBlockEntry.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Filter_Function ::= TOK_REGEXP TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int regularexpressionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int regularexpressionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String regularexpression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new RegularExpression(regularexpression);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Filter_Function ::= TOK_EXPR TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String expression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Expression(expression);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Filter_Function ::= TOK_EXIT TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionExit(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Filter_Function ::= TOK_ENTRY TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionEntry(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Filter_Function ::= TOK_CALLS 
            {
              Object RESULT =null;
		
							RESULT = FunctionCalls.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Filter_Function ::= TOK_CALL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionCall(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Filter_Function ::= TOK_LABEL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Label(label);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Filter_Function ::= TOK_FUNC TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Function(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Filter_Function ::= TOK_COLUMN TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int columnnumberleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int columnnumberright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Integer columnnumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Column(columnnumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Filter_Function ::= TOK_LINE_ABBREV 
            {
              Object RESULT =null;
		int linenumberleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int linenumberright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = new Line(linenumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Filter_Function ::= TOK_LINE TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int linenumberleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int linenumberright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Line(linenumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Filter_Function ::= TOK_FILE TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new File(filename);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Filter_Function ::= TOK_IDENTITY 
            {
              Object RESULT =null;
		
							RESULT = Identity.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Filter ::= TOK_COMPOSE TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filter1left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).left;
		int filter1right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).right;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		int filter2left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filter2right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Compose((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Filter ::= TOK_ENCLOSING_SCOPES TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filterleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new EnclosingScopes((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Filter ::= TOK_SETMINUS TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filter1left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).left;
		int filter1right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).right;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		int filter2left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filter2right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new SetMinus((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Filter ::= TOK_INTERSECT TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filter1left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).left;
		int filter1right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).right;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		int filter2left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filter2right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Intersection((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Filter ::= TOK_UNION TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filter1left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).left;
		int filter1right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).right;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		int filter2left = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filter2right = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Union((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Filter ::= TOK_COMPLEMENT TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filterleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new Complement((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Filter ::= Filter_Function 
            {
              Object RESULT =null;
		int filterleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = filter;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Atom ::= TOK_EDGECOV TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int filterleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);
						
							RESULT = new Edges((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",3, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PathPattern ::= PathPattern TOK_KLEENE 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(pattern != null);
							assert(pattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Repetition((PathPattern)pattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PathPattern ::= PathPattern TOK_ALTERNATIVE PathPattern 
            {
              Object RESULT =null;
		int leftPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).left;
		int leftPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).right;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		int rightPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int rightPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Union((PathPattern)leftPattern, (PathPattern)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PathPattern ::= PathPattern TOK_CONCAT PathPattern 
            {
              Object RESULT =null;
		int leftPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).left;
		int leftPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).right;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		int rightPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int rightPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Concatenation((PathPattern)leftPattern, (PathPattern)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PathPattern ::= TOK_L_PARENTHESIS PathPattern TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PathPattern ::= Atom 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = atom;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CoveragePattern ::= CoveragePattern TOK_ALTERNATIVE CoveragePattern 
            {
              Object RESULT =null;
		int leftPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).left;
		int leftPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).right;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		int rightPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int rightPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Union((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CoveragePattern ::= CoveragePattern TOK_CONCAT CoveragePattern 
            {
              Object RESULT =null;
		int leftPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).left;
		int leftPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).right;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		int rightPatternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int rightPatternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);
							
							RESULT = new Concatenation((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CoveragePattern ::= TOK_QUOTE PathPattern TOK_QUOTE 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(pattern != null);
							assert(pattern instanceof PathPattern);
							
							RESULT = new Quotation((PathPattern)pattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CoveragePattern ::= TOK_L_PARENTHESIS CoveragePattern TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CoveragePattern ::= Atom 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = atom;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Passing ::= TOK_PASSING PathPattern 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",5, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Passing ::= 
            {
              Object RESULT =null;
		
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Repetition(new Edges(Identity.getInstance()));
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",5, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cover ::= TOK_COVER CoveragePattern 
            {
              Object RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Cover",4, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FQLSpecification ::= Cover Passing 
            {
              Object RESULT =null;
		int coverageleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int coverageright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object coverage = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		int passingleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).left;
		int passingright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()).right;
		Object passing = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(coverage != null);
							assert(coverage instanceof CoverageSpecification);
							assert(passing != null);
							assert(passing instanceof PathPattern);
							
							RESULT = new FQLSpecification((CoverageSpecification)coverage, (PathPattern)passing);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("FQLSpecification",0, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FQLSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		RESULT = start_val;
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$FQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FQLParser$parser.done_parsing();
          return CUP$FQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

