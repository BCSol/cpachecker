
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package org.sosy_lab.cpachecker.fllesh.fql2.parser;

import org.sosy_lab.cpachecker.fllesh.fql2.ast.Nodes;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.Edges;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.Paths;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.Predicate;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.FQLSpecification;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.ScopePropagator;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.CoverageSpecification;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Quotation;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Concatenation;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.PathPattern;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Identity;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.File;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.BasicBlockEntry;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.ConditionEdge;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.DecisionEdge;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.ConditionGraph;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Line;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.FunctionCalls;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Column;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Function;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Label;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.FunctionCall;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.FunctionEntry;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.FunctionExit;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.EnclosingScopes;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Compose;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Expression;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.RegularExpression;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Filter;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.SetMinus;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Intersection;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Union;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Complement;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.filter.Predication;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.terms.Term;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.terms.Variable;
import org.sosy_lab.cpachecker.fllesh.fql2.ast.terms.Constant;
import java.io.Reader;
import java.io.InputStream;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class FQLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FQLParser() {super();}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\006\000\002\006\004\000\002\007\002\000\002\007\004" +
    "\000\002\003\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\005\006\000\002\005\006\000\002\005\010" +
    "\000\002\005\003\000\002\010\003\000\002\010\006\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\006\000\002\010\010\000\002\010\010\000\002\011" +
    "\003\000\002\011\006\000\002\011\006\000\002\011\003" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\003\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\007\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\056\006\057\005\001\002\000\006\002" +
    "\ufffd\060\053\001\002\000\016\004\211\037\056\047\062" +
    "\050\063\051\060\055\213\001\002\000\062\007\037\010" +
    "\030\011\021\012\026\013\034\014\013\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\012\031\036\032\033\033\031" +
    "\034\016\035\041\036\022\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\004\206\001\002" +
    "\000\004\004\201\001\002\000\004\004\176\001\002\000" +
    "\004\004\173\001\002\000\010\005\uffd6\006\uffd6\057\uffd6" +
    "\001\002\000\004\004\166\001\002\000\010\005\uffdd\006" +
    "\uffdd\057\uffdd\001\002\000\010\005\uffd8\006\uffd8\057\uffd8" +
    "\001\002\000\004\004\163\001\002\000\004\004\156\001" +
    "\002\000\010\005\uffed\006\uffed\057\uffed\001\002\000\010" +
    "\005\uffd7\006\uffd7\057\uffd7\001\002\000\004\004\153\001" +
    "\002\000\010\005\uffe2\006\uffe2\057\uffe2\001\002\000\004" +
    "\004\150\001\002\000\004\004\145\001\002\000\004\004" +
    "\140\001\002\000\004\004\135\001\002\000\004\004\130" +
    "\001\002\000\004\004\125\001\002\000\010\005\uffd5\006" +
    "\uffd5\057\uffd5\001\002\000\004\004\122\001\002\000\010" +
    "\005\uffe5\006\uffe5\057\uffe5\001\002\000\004\057\005\001" +
    "\002\000\004\004\046\001\002\000\004\004\043\001\002" +
    "\000\004\062\044\001\002\000\004\005\045\001\002\000" +
    "\010\005\uffda\006\uffda\057\uffda\001\002\000\062\007\037" +
    "\010\030\011\021\012\026\013\034\014\013\015\011\016" +
    "\027\017\017\020\032\021\025\022\042\023\014\024\020" +
    "\025\024\026\015\027\035\030\012\031\036\032\033\033" +
    "\031\034\016\035\041\036\022\001\002\000\004\005\050" +
    "\001\002\000\010\005\uffe8\006\uffe8\057\uffe8\001\002\000" +
    "\006\002\ufffd\060\053\001\002\000\004\002\uffff\001\002" +
    "\000\014\004\061\037\056\047\062\050\063\051\060\001" +
    "\002\000\020\002\uffee\005\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\060\uffee\001\002\000\012\002\ufffc\052\075\053" +
    "\074\054\076\001\002\000\006\061\110\063\107\001\002" +
    "\000\016\002\ufff6\005\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\001\002\000\004\004\101\001\002\000\014\004\061" +
    "\037\056\047\062\050\063\051\060\001\002\000\004\004" +
    "\067\001\002\000\004\004\064\001\002\000\062\007\037" +
    "\010\030\011\021\012\026\013\034\014\013\015\011\016" +
    "\027\017\017\020\032\021\025\022\042\023\014\024\020" +
    "\025\024\026\015\027\035\030\012\031\036\032\033\033" +
    "\031\034\016\035\041\036\022\001\002\000\004\005\066" +
    "\001\002\000\020\002\ufff0\005\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\060\ufff0\001\002\000\062\007\037\010\030" +
    "\011\021\012\026\013\034\014\013\015\011\016\027\017" +
    "\017\020\032\021\025\022\042\023\014\024\020\025\024" +
    "\026\015\027\035\030\012\031\036\032\033\033\031\034" +
    "\016\035\041\036\022\001\002\000\004\005\071\001\002" +
    "\000\020\002\ufff1\005\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\060\ufff1\001\002\000\012\005\073\052\075\053\074" +
    "\054\076\001\002\000\016\002\ufff5\005\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\001\002\000\014\004\061\037\056" +
    "\047\062\050\063\051\060\001\002\000\014\004\061\037" +
    "\056\047\062\050\063\051\060\001\002\000\016\002\ufff2" +
    "\005\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\001\002\000" +
    "\016\002\ufff4\005\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\001\002\000\016\002\ufff3\005\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\001\002\000\062\007\037\010\030\011\021" +
    "\012\026\013\034\014\013\015\011\016\027\017\017\020" +
    "\032\021\025\022\042\023\014\024\020\025\024\026\015" +
    "\027\035\030\012\031\036\032\033\033\031\034\016\035" +
    "\041\036\022\001\002\000\004\006\103\001\002\000\004" +
    "\063\104\001\002\000\004\005\105\001\002\000\020\002" +
    "\uffef\005\uffef\052\uffef\053\uffef\054\uffef\055\uffef\060\uffef" +
    "\001\002\000\016\041\116\042\115\043\117\044\113\045" +
    "\111\046\112\001\002\000\020\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\001\002\000\020\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\001\002\000\006\061\uffcd\063\uffcd\001\002\000\006\061" +
    "\uffcc\063\uffcc\001\002\000\006\061\uffce\063\uffce\001\002" +
    "\000\006\061\110\063\107\001\002\000\006\061\uffd0\063" +
    "\uffd0\001\002\000\006\061\uffd1\063\uffd1\001\002\000\006" +
    "\061\uffcf\063\uffcf\001\002\000\004\040\121\001\002\000" +
    "\020\002\uffd4\005\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\060\uffd4\001\002\000\062\007\037\010\030\011\021\012" +
    "\026\013\034\014\013\015\011\016\027\017\017\020\032" +
    "\021\025\022\042\023\014\024\020\025\024\026\015\027" +
    "\035\030\012\031\036\032\033\033\031\034\016\035\041" +
    "\036\022\001\002\000\004\005\124\001\002\000\010\005" +
    "\uffec\006\uffec\057\uffec\001\002\000\004\063\126\001\002" +
    "\000\004\005\127\001\002\000\010\005\uffe1\006\uffe1\057" +
    "\uffe1\001\002\000\062\007\037\010\030\011\021\012\026" +
    "\013\034\014\013\015\011\016\027\017\017\020\032\021" +
    "\025\022\042\023\014\024\020\025\024\026\015\027\035" +
    "\030\012\031\036\032\033\033\031\034\016\035\041\036" +
    "\022\001\002\000\004\006\132\001\002\000\062\007\037" +
    "\010\030\011\021\012\026\013\034\014\013\015\011\016" +
    "\027\017\017\020\032\021\025\022\042\023\014\024\020" +
    "\025\024\026\015\027\035\030\012\031\036\032\033\033" +
    "\031\034\016\035\041\036\022\001\002\000\004\005\134" +
    "\001\002\000\010\005\uffeb\006\uffeb\057\uffeb\001\002\000" +
    "\004\061\136\001\002\000\004\005\137\001\002\000\010" +
    "\005\uffdc\006\uffdc\057\uffdc\001\002\000\062\007\037\010" +
    "\030\011\021\012\026\013\034\014\013\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\012\031\036\032\033\033\031" +
    "\034\016\035\041\036\022\001\002\000\004\006\142\001" +
    "\002\000\062\007\037\010\030\011\021\012\026\013\034" +
    "\014\013\015\011\016\027\017\017\020\032\021\025\022" +
    "\042\023\014\024\020\025\024\026\015\027\035\030\012" +
    "\031\036\032\033\033\031\034\016\035\041\036\022\001" +
    "\002\000\004\005\144\001\002\000\010\005\uffea\006\uffea" +
    "\057\uffea\001\002\000\004\062\146\001\002\000\004\005" +
    "\147\001\002\000\010\005\uffe4\006\uffe4\057\uffe4\001\002" +
    "\000\004\061\151\001\002\000\004\005\152\001\002\000" +
    "\010\005\uffde\006\uffde\057\uffde\001\002\000\004\061\154" +
    "\001\002\000\004\005\155\001\002\000\010\005\uffdb\006" +
    "\uffdb\057\uffdb\001\002\000\062\007\037\010\030\011\021" +
    "\012\026\013\034\014\013\015\011\016\027\017\017\020" +
    "\032\021\025\022\042\023\014\024\020\025\024\026\015" +
    "\027\035\030\012\031\036\032\033\033\031\034\016\035" +
    "\041\036\022\001\002\000\004\006\160\001\002\000\062" +
    "\007\037\010\030\011\021\012\026\013\034\014\013\015" +
    "\011\016\027\017\017\020\032\021\025\022\042\023\014" +
    "\024\020\025\024\026\015\027\035\030\012\031\036\032" +
    "\033\033\031\034\016\035\041\036\022\001\002\000\004" +
    "\005\162\001\002\000\010\005\uffe7\006\uffe7\057\uffe7\001" +
    "\002\000\004\063\164\001\002\000\004\005\165\001\002" +
    "\000\010\005\uffe3\006\uffe3\057\uffe3\001\002\000\062\007" +
    "\037\010\030\011\021\012\026\013\034\014\013\015\011" +
    "\016\027\017\017\020\032\021\025\022\042\023\014\024" +
    "\020\025\024\026\015\027\035\030\012\031\036\032\033" +
    "\033\031\034\016\035\041\036\022\001\002\000\004\006" +
    "\170\001\002\000\062\007\037\010\030\011\021\012\026" +
    "\013\034\014\013\015\011\016\027\017\017\020\032\021" +
    "\025\022\042\023\014\024\020\025\024\026\015\027\035" +
    "\030\012\031\036\032\033\033\031\034\016\035\041\036" +
    "\022\001\002\000\004\005\172\001\002\000\010\005\uffe9" +
    "\006\uffe9\057\uffe9\001\002\000\004\062\174\001\002\000" +
    "\004\005\175\001\002\000\010\005\uffd9\006\uffd9\057\uffd9" +
    "\001\002\000\004\061\177\001\002\000\004\005\200\001" +
    "\002\000\010\005\uffe0\006\uffe0\057\uffe0\001\002\000\062" +
    "\007\037\010\030\011\021\012\026\013\034\014\013\015" +
    "\011\016\027\017\017\020\032\021\025\022\042\023\014" +
    "\024\020\025\024\026\015\027\035\030\012\031\036\032" +
    "\033\033\031\034\016\035\041\036\022\001\002\000\004" +
    "\006\203\001\002\000\004\037\056\001\002\000\004\005" +
    "\205\001\002\000\010\005\uffe6\006\uffe6\057\uffe6\001\002" +
    "\000\004\061\207\001\002\000\004\005\210\001\002\000" +
    "\010\005\uffdf\006\uffdf\057\uffdf\001\002\000\016\004\211" +
    "\037\056\047\062\050\063\051\060\055\213\001\002\000" +
    "\012\002\ufffe\052\217\053\220\060\ufffe\001\002\000\014" +
    "\004\061\037\056\047\062\050\063\051\060\001\002\000" +
    "\014\002\ufffb\005\ufffb\052\ufffb\053\ufffb\060\ufffb\001\002" +
    "\000\012\052\075\053\074\054\076\055\216\001\002\000" +
    "\014\002\ufff9\005\ufff9\052\ufff9\053\ufff9\060\ufff9\001\002" +
    "\000\016\004\211\037\056\047\062\050\063\051\060\055" +
    "\213\001\002\000\016\004\211\037\056\047\062\050\063" +
    "\051\060\055\213\001\002\000\014\002\ufff7\005\ufff7\052" +
    "\ufff7\053\ufff7\060\ufff7\001\002\000\014\002\ufff8\005\ufff8" +
    "\052\ufff8\053\ufff8\060\ufff8\001\002\000\010\005\224\052" +
    "\217\053\220\001\002\000\014\002\ufffa\005\ufffa\052\ufffa" +
    "\053\ufffa\060\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\006\006\003\001\001\000\004\007" +
    "\224\001\001\000\010\003\211\005\213\012\053\001\001" +
    "\000\006\010\037\011\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\046\011\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\051\001\001" +
    "\000\002\001\001\000\010\004\054\005\056\012\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\071\005\056\012\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\064\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\067\011\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\077\005\056\012\053\001\001" +
    "\000\010\004\076\005\056\012\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\101" +
    "\011\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\122\011\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\130" +
    "\011\022\001\001\000\002\001\001\000\006\010\132\011" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\140\011\022\001\001\000\002\001\001\000\006\010\142" +
    "\011\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\156" +
    "\011\022\001\001\000\002\001\001\000\006\010\160\011" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\166\011\022\001\001\000\002\001\001\000\006\010\170" +
    "\011\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\201\011\022\001\001\000\002\001\001\000\004\012\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\222" +
    "\005\213\012\053\001\001\000\002\001\001\000\010\004" +
    "\214\005\056\012\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\221\005\213\012" +
    "\053\001\001\000\010\003\220\005\213\012\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public FQLParser(String pQueryString) {
      this(new StringReader(pQueryString));
	}

	public FQLParser(Reader pReader) {
	  this(new FQLLexer(pReader));
	}

	public FQLParser(InputStream pInputStream) {
	  this(new FQLLexer(pInputStream));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$FQLParser$actions {



  private final FQLParser parser;

  /** Constructor */
  CUP$FQLParser$actions(FQLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FQLParser$do_action(
    int                        CUP$FQLParser$act_num,
    java_cup.runtime.lr_parser CUP$FQLParser$parser,
    java.util.Stack            CUP$FQLParser$stack,
    int                        CUP$FQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FQLParser$result;

      /* select the action based on the action number */
      switch (CUP$FQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Comparison ::= TOK_NEQ 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.NOT_EQUAL;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Comparison ::= TOK_LESS 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.LESS;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Comparison ::= TOK_LESS_OR_EQ 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.LESS_OR_EQUAL;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Comparison ::= TOK_EQ 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.EQUAL;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Comparison ::= TOK_GREATER 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.GREATER;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Comparison ::= TOK_GREATER_OR_EQ 
            {
              Object RESULT =null;
		
							RESULT = Predicate.Comparison.GREATER_OR_EQUAL;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= TOK_NAT_NUMBER 
            {
              Object RESULT =null;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = new Constant(number);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Term",9, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Term ::= TOK_C_IDENT 
            {
              Object RESULT =null;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = new Variable(identifier);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Term",9, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Predicate ::= TOK_L_BRACE Term Comparison Term TOK_R_BRACE 
            {
              Object RESULT =null;
		Object leftterm = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object comparison = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightterm = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(leftterm != null);
							assert(comparison != null);
							assert(rightterm != null);

							assert(leftterm instanceof Term);
							assert(comparison instanceof Predicate.Comparison);
							assert(rightterm instanceof Term);

							RESULT = new Predicate((Term)leftterm, (Predicate.Comparison)comparison, (Term)rightterm);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Predicate",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Filter_Function ::= TOK_CONDITIONGRAPH 
            {
              Object RESULT =null;
		
							RESULT = ConditionGraph.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Filter_Function ::= TOK_DECISIONEDGE 
            {
              Object RESULT =null;
		
							RESULT = DecisionEdge.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Filter_Function ::= TOK_CONDITIONEDGE 
            {
              Object RESULT =null;
		
							RESULT = ConditionEdge.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Filter_Function ::= TOK_BASICBLOCKENTRY 
            {
              Object RESULT =null;
		
							RESULT = BasicBlockEntry.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Filter_Function ::= TOK_REGEXP TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String regularexpression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new RegularExpression(regularexpression);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Filter_Function ::= TOK_EXPR TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String expression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Expression(expression);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Filter_Function ::= TOK_EXIT TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionExit(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Filter_Function ::= TOK_ENTRY TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionEntry(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Filter_Function ::= TOK_CALLS 
            {
              Object RESULT =null;
		
							RESULT = FunctionCalls.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Filter_Function ::= TOK_CALL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new FunctionCall(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Filter_Function ::= TOK_LABEL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String label = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Label(label);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Filter_Function ::= TOK_FUNC TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Function(function);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Filter_Function ::= TOK_COLUMN TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Integer columnnumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Column(columnnumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Filter_Function ::= TOK_LINE_ABBREV 
            {
              Object RESULT =null;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = new Line(linenumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Filter_Function ::= TOK_LINE TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new Line(linenumber);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Filter_Function ::= TOK_FILE TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = new File(filename);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Filter_Function ::= TOK_IDENTITY 
            {
              Object RESULT =null;
		
							RESULT = Identity.getInstance();
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Filter ::= TOK_PREDICATION TOK_L_PARENTHESIS Filter TOK_COMMA Predicate TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);
							
							assert(predicate != null);
							assert(predicate instanceof Predicate);
							
							RESULT = new Predication((Filter)filter, (Predicate)predicate);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Filter ::= TOK_COMPOSE TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Compose((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Filter ::= TOK_ENCLOSING_SCOPES TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new EnclosingScopes((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Filter ::= TOK_SETMINUS TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new SetMinus((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Filter ::= TOK_INTERSECT TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Intersection((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Filter ::= TOK_UNION TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Union((Filter)filter1, (Filter)filter2);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Filter ::= TOK_COMPLEMENT TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new Complement((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Filter ::= Filter_Function 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = filter;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Atom ::= Predicate 
            {
              Object RESULT =null;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(predicate != null);
							assert(predicate instanceof Predicate);
							
							RESULT = predicate;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Atom ::= TOK_PATHCOV TOK_L_PARENTHESIS Filter TOK_COMMA TOK_NAT_NUMBER TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Integer bound = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);
							
							assert(bound != null);
							
							RESULT = new Paths((Filter)filter, bound.intValue());
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Atom ::= TOK_EDGECOV TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);
						
							RESULT = new Edges((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Atom ::= TOK_NODECOV TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(filter != null);
							assert(filter instanceof Filter);
							
							RESULT = new Nodes((Filter)filter);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PathPattern ::= PathPattern TOK_KLEENE 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(pattern != null);
							assert(pattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Repetition((PathPattern)pattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PathPattern ::= PathPattern TOK_ALTERNATIVE PathPattern 
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Union((PathPattern)leftPattern, (PathPattern)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PathPattern ::= PathPattern TOK_CONCAT PathPattern 
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.pathpattern.Concatenation((PathPattern)leftPattern, (PathPattern)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PathPattern ::= TOK_L_PARENTHESIS PathPattern TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PathPattern ::= Atom 
            {
              Object RESULT =null;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = atom;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CoveragePattern ::= CoveragePattern TOK_ALTERNATIVE CoveragePattern 
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);
							
							RESULT = new org.sosy_lab.cpachecker.fllesh.fql2.ast.coveragespecification.Union((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CoveragePattern ::= CoveragePattern TOK_CONCAT CoveragePattern 
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);
							
							RESULT = new Concatenation((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CoveragePattern ::= TOK_QUOTE PathPattern TOK_QUOTE 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							assert(pattern != null);
							assert(pattern instanceof PathPattern);
							
							RESULT = new Quotation((PathPattern)pattern);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CoveragePattern ::= TOK_L_PARENTHESIS CoveragePattern TOK_R_PARENTHESIS 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CoveragePattern ::= Atom 
            {
              Object RESULT =null;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = atom;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Passing ::= TOK_PASSING PathPattern 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",5, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Passing ::= 
            {
              Object RESULT =null;
		
							RESULT = null;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",5, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cover ::= TOK_COVER CoveragePattern 
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							RESULT = pattern;
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Cover",4, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FQLSpecification ::= TOK_IN Filter Cover Passing 
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object coverage = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		Object passing = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
						 	assert(filter != null);
						 	assert(filter instanceof Filter);
						 	assert(coverage != null);
							assert(coverage instanceof CoverageSpecification);
							assert(passing != null);
							assert(passing instanceof PathPattern);
							
							Filter lScope = (Filter)filter;
							
							ScopePropagator lScopePropagator = new ScopePropagator(lScope);
							
							CoverageSpecification lScopedSpecification = ((CoverageSpecification)coverage).accept(lScopePropagator);
							
							RESULT = new FQLSpecification(lScopedSpecification, (PathPattern)passing);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("FQLSpecification",0, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FQLSpecification ::= Cover Passing 
            {
              Object RESULT =null;
		Object coverage = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		Object passing = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;
		
							assert(coverage != null);
							assert(coverage instanceof CoverageSpecification);
							assert(passing != null);
							assert(passing instanceof PathPattern);
							
							RESULT = new FQLSpecification((CoverageSpecification)coverage, (PathPattern)passing);
						
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("FQLSpecification",0, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FQLSpecification EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		RESULT = start_val;
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$FQLParser$parser.done_parsing();
          return CUP$FQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

