/*
 * CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.cpa.summary.summaryGeneration;

import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import java.util.Optional;
import org.sosy_lab.common.ShutdownNotifier;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.model.CFAEdge;
import org.sosy_lab.cpachecker.cfa.model.CFANode;
import org.sosy_lab.cpachecker.cfa.model.FunctionEntryNode;
import org.sosy_lab.cpachecker.core.algorithm.Algorithm.AlgorithmStatus;
import org.sosy_lab.cpachecker.core.algorithm.CPAAlgorithm;
import org.sosy_lab.cpachecker.core.algorithm.CPAAlgorithm.CPAAlgorithmFactory;
import org.sosy_lab.cpachecker.core.defaults.AutomaticCPAFactory;
import org.sosy_lab.cpachecker.core.defaults.StopSepOperator;
import org.sosy_lab.cpachecker.core.interfaces.AbstractDomain;
import org.sosy_lab.cpachecker.core.interfaces.AbstractState;
import org.sosy_lab.cpachecker.core.interfaces.CPAFactory;
import org.sosy_lab.cpachecker.core.interfaces.ConfigurableProgramAnalysis;
import org.sosy_lab.cpachecker.core.interfaces.MergeOperator;
import org.sosy_lab.cpachecker.core.interfaces.Precision;
import org.sosy_lab.cpachecker.core.interfaces.PrecisionAdjustment;
import org.sosy_lab.cpachecker.core.interfaces.PrecisionAdjustmentResult;
import org.sosy_lab.cpachecker.core.interfaces.StateSpacePartition;
import org.sosy_lab.cpachecker.core.interfaces.StopOperator;
import org.sosy_lab.cpachecker.core.interfaces.TransferRelation;
import org.sosy_lab.cpachecker.core.reachedset.ReachedSet;
import org.sosy_lab.cpachecker.core.reachedset.ReachedSetFactory;
import org.sosy_lab.cpachecker.core.reachedset.UnmodifiableReachedSet;
import org.sosy_lab.cpachecker.cpa.summary.ToComputeSummaryState;
import org.sosy_lab.cpachecker.cpa.summary.interfaces.Summary;
import org.sosy_lab.cpachecker.cpa.summary.interfaces.UseSummaryCPA;
import org.sosy_lab.cpachecker.cpa.summary.summaryUsage.TopLevelSummaryCPA;
import org.sosy_lab.cpachecker.exceptions.CPAException;
import org.sosy_lab.cpachecker.exceptions.CPATransferException;
import org.sosy_lab.cpachecker.util.AbstractStates;

/**
 * Top-level CPA for summary generation.
 *
 * Operates over {@link Summary} states,
 * generated by the wrapped analysis.
 * May use {@link ToComputeSummaryState} as markers for requesting
 * summary recomputation.
 */
public class GenSummaryCPA implements ConfigurableProgramAnalysis, AbstractDomain,
                                      TransferRelation, PrecisionAdjustment {

  private final TopLevelSummaryCPA wrapped;

  // todo: what parameters is this guy created with?
  private final CPAAlgorithmFactory algorithmFactory;

  // todo: what parameters is this guy created with?
  private final ReachedSetFactory reachedSetFactory;
  private final CFA cfa;

  // todo: maybe apart from the reached set we should maintain a stateful
  // datastructure which would dictate what summaries are computed?
  // actually, what would be a good datastructure for
  // a partial order grouped under a key? Just a list?..

  private final Multimap<String, Summary> computedSummaries;

  public GenSummaryCPA(
      LogManager logger,
      Configuration config,
      ShutdownNotifier shutdownNotifier,
      ReachedSetFactory pReachedSetFactory,
      CFA pCfa,
      ConfigurableProgramAnalysis pWrapped) throws InvalidConfigurationException {
    reachedSetFactory = pReachedSetFactory;
    cfa = pCfa;
    Preconditions.checkArgument(pWrapped instanceof UseSummaryCPA,
        "Parameter CPA has to implement the SummaryCPA interface.");

    // todo: use the explicit map instead of the reached set.
    wrapped = new TopLevelSummaryCPA(pWrapped, null);
    algorithmFactory = new CPAAlgorithmFactory(
        this, logger, config, shutdownNotifier
    );
    computedSummaries = HashMultimap.create();
  }

  @Override
  public AbstractState getInitialState(
      CFANode node, StateSpacePartition partition)
        throws InterruptedException {

    // Empty summary which calls "main".
    // todo: look up the "partition" variable, to figure out which function this belongs to.

    // todo: what about all the global code?..


    Preconditions.checkArgument(node instanceof FunctionEntryNode);
    // todo: check.

    // that looks incorrect due to the code which performs globals initialization.
    return new ToComputeSummaryState(
        wrapped.getInitialState(node, partition),
        wrapped.getInitialPrecision(node, partition), (FunctionEntryNode) node);


    // todo
//    return null;
  }

  @Override
  public Collection<? extends AbstractState> getAbstractSuccessors(
      AbstractState state, Precision precision) throws CPATransferException,
                                                       InterruptedException {
    try {
      return getAbstractSuccessors0((SummaryState) state, precision);
    } catch (CPAException pE) {
      throw new CPATransferException("Exception occurred", pE);
    }
  }

  public Collection<SummaryState> getAbstractSuccessors0
      (SummaryState sState, Precision precision) throws CPAException,
                                                        InterruptedException {

    // todo: rewrite this function.

    // We got a summary for one state.
    // It does not have to be an over-approximation yet,
    // it is a result of an intraprocedural analysis application.

    ReachedSet reached = sState.getReached();

    FluentIterable<ToComputeSummaryState> toRecompute =
        AbstractStates.projectToType(reached, ToComputeSummaryState.class);


    for (ToComputeSummaryState toComputeSummaryState : toRecompute) {


    }

    // For all callsites which were not covered by the existing summary,
    // regenerate the summary. Additionally, regenerate the summary for the function
    // associated with {@code sState}.

    // todo: launch wrapped recursively on all function called from gState
    // reachedSet, which were not covered by their summary
    // (and not expanded inside due to dynamic inlining).

    return null;
  }

  // todo: why not do this in precision adjustment.
  private SummaryState generateSummary(
      ToComputeSummaryState recomputeRequest
  ) throws CPAException, InterruptedException {

    String functionName = recomputeRequest.getFunctionName();

    ReachedSet reached = reachedSetFactory.create();

    reached.add(recomputeRequest.getState(), recomputeRequest.getPrecision());
    CPAAlgorithm algorithm = algorithmFactory.newInstance();

    // todo: check the algorithm status.
    // todo: also check for hasWaitingStates: might be early termination
    // due to the counterexample being found.
    AlgorithmStatus status = algorithm.run(reached);

    // todo...
    Summary generatedSummary = wrapped.getSummaryManager().generateSummary(reached);

    // todo: consult the updated status, create the summary.

    // postconditions: summaries that should be regenerated.
    // That is given by all calls from {@code pReached}
    // which are not covered by existing summaries.


    return null;
  }

  @Override
  public Optional<PrecisionAdjustmentResult> prec(
      AbstractState state,
      Precision precision,
      UnmodifiableReachedSet states,
      Function<AbstractState, AbstractState> stateProjection,
      AbstractState fullState) throws CPAException, InterruptedException {
    return null;
  }

  @Override
  public AbstractDomain getAbstractDomain() {
    return this;
  }

  @Override
  public TransferRelation getTransferRelation() {
    return this;
  }

  @Override
  public MergeOperator getMergeOperator() {
    return null;
  }

  @Override
  public StopOperator getStopOperator() {
    return new StopSepOperator(this);
  }

  @Override
  public PrecisionAdjustment getPrecisionAdjustment() {
    return this;
  }


  @Override
  public Precision getInitialPrecision(
      CFANode node, StateSpacePartition partition) throws InterruptedException {
    return null;
  }

  @Override
  public AbstractState join(
      AbstractState state1, AbstractState state2) throws CPAException, InterruptedException {
    return null;
  }

  @Override
  public boolean isLessOrEqual(
      AbstractState state1, AbstractState state2) throws CPAException, InterruptedException {
    return false;
  }


  @Override
  public Collection<? extends AbstractState> getAbstractSuccessorsForEdge(
      AbstractState state, Precision precision, CFAEdge cfaEdge)
      throws CPATransferException, InterruptedException {
    return null;
  }

  public static CPAFactory factory() {
    return AutomaticCPAFactory.forType(GenSummaryCPA.class);
  }
}
