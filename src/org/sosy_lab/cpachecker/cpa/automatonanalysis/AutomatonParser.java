
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 15 15:53:18 CEST 2010
//----------------------------------------------------

package org.sosy_lab.cpachecker.cpa.automatonanalysis;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import org.sosy_lab.common.LogManager;
import java.util.logging.Level;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 15 15:53:18 CEST 2010
  */
@SuppressWarnings(value = { "all" }) public  class AutomatonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\010\000\002\003\010\000\002\003\007" +
    "\000\002\005\005\000\002\004\006\000\002\006\004\000" +
    "\002\006\002\000\002\013\006\000\002\013\010\000\002" +
    "\007\004\000\002\007\002\000\002\014\006\000\002\014" +
    "\007\000\002\010\004\000\002\010\002\000\002\015\011" +
    "\000\002\015\010\000\002\015\010\000\002\011\004\000" +
    "\002\011\002\000\002\016\004\000\002\012\004\000\002" +
    "\012\002\000\002\017\006\000\002\017\004\000\002\017" +
    "\011\000\002\020\004\000\002\020\002\000\002\022\003" +
    "\000\002\022\005\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\023\003\000\002\023\011\000\002" +
    "\021\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\005\000\002\024\011\000\002\024" +
    "\006\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\002\uffff\014\006\015\010\016\005\001" +
    "\002\000\004\002\224\001\002\000\004\014\217\001\002" +
    "\000\004\036\213\001\002\000\012\002\uffff\014\006\015" +
    "\010\016\005\001\002\000\004\014\011\001\002\000\004" +
    "\036\012\001\002\000\006\020\013\021\ufff8\001\002\000" +
    "\004\036\204\001\002\000\004\017\202\001\002\000\006" +
    "\020\013\021\ufff8\001\002\000\004\021\017\001\002\000" +
    "\004\022\176\001\002\000\006\017\ufff4\022\023\001\002" +
    "\000\004\017\ufffb\001\002\000\006\017\ufff4\022\023\001" +
    "\002\000\006\036\025\052\024\001\002\000\004\036\172" +
    "\001\002\000\004\011\026\001\002\000\030\004\040\012" +
    "\027\017\ufff0\022\ufff0\026\030\030\043\031\041\036\042" +
    "\037\045\045\031\046\037\001\002\000\024\004\040\012" +
    "\027\026\030\030\043\031\041\036\042\037\045\045\031" +
    "\046\037\001\002\000\012\027\163\047\165\050\166\051" +
    "\164\001\002\000\060\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\012\uffda\013\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\042\uffda\045\uffda\046\uffda\047\uffda\001" +
    "\002\000\064\004\uffe2\005\uffe2\006\uffe2\007\uffe2\012\uffe2" +
    "\013\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\001\002\000\012\040\157\042\160\043\146\044\147" +
    "\001\002\000\030\004\040\012\027\017\ufff0\022\ufff0\026" +
    "\030\030\043\031\041\036\042\037\045\045\031\046\037" +
    "\001\002\000\064\004\uffdd\005\uffdd\006\uffdd\007\uffdd\012" +
    "\uffdd\013\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\001\002\000\014\005\065\006\070\007\075\040" +
    "\066\042\067\001\002\000\060\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\012\uffd9\013\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\042\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\001\002\000\024\004\040\012\027\026\030\030\043" +
    "\031\041\036\042\037\045\045\031\046\037\001\002\000" +
    "\004\012\056\001\002\000\064\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\012\uffe0\013\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\001\002\000\004\012\046\001\002" +
    "\000\006\017\ufff3\022\ufff3\001\002\000\066\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\001\002\000" +
    "\006\036\047\047\050\001\002\000\004\012\052\001\002" +
    "\000\004\013\051\001\002\000\060\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\012\uffcb\013\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\001\002\000\004\047\053\001\002\000\004\013" +
    "\054\001\002\000\004\013\055\001\002\000\060\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\012\uffcc\013\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\001\002\000\004\036\057\001\002" +
    "\000\004\012\060\001\002\000\004\047\061\001\002\000" +
    "\004\013\062\001\002\000\004\013\063\001\002\000\064" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\012\uffdc\013\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\001\002" +
    "\000\060\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012\uffd8\013" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\001\002\000\024" +
    "\004\040\012\027\026\030\030\043\031\041\036\042\037" +
    "\045\045\031\046\037\001\002\000\024\004\040\012\027" +
    "\026\030\030\043\031\041\036\042\037\045\045\031\046" +
    "\037\001\002\000\024\004\040\012\027\026\030\030\043" +
    "\031\041\036\042\037\045\045\031\046\037\001\002\000" +
    "\024\004\040\012\027\026\030\030\043\031\041\036\042" +
    "\037\045\045\031\046\037\001\002\000\060\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\012\uffd1\013\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\066\042\067\045\uffd1" +
    "\046\uffd1\047\uffd1\001\002\000\060\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\012\uffd4\013\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\001\002\000\060\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\012\uffd3\013\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\001\002\000\060\004\uffd2\005\uffd2\006\uffd2\007\uffd2\012" +
    "\uffd2\013\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\066\042\067\045\uffd2\046\uffd2\047\uffd2\001\002" +
    "\000\020\023\uffeb\024\uffeb\025\100\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\001\002\000\020\023\uffeb\024\uffeb\025\100" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002\000\016\023" +
    "\uffe8\024\uffe8\032\106\033\102\034\103\035\uffe8\001\002" +
    "\000\024\004\040\012\027\026\030\030\043\031\041\036" +
    "\042\037\045\045\031\046\037\001\002\000\030\005\065" +
    "\006\070\023\uffea\024\uffea\025\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\066\042\067\001\002\000\004\036\142" +
    "\001\002\000\042\004\040\012\027\023\uffe3\024\uffe3\026" +
    "\030\030\043\031\132\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\042\037\045\045\031\046\037\047\126\001\002\000" +
    "\016\023\uffe8\024\uffe8\032\106\033\102\034\103\035\uffe8" +
    "\001\002\000\010\023\115\024\116\035\117\001\002\000" +
    "\004\012\107\001\002\000\004\036\110\001\002\000\004" +
    "\012\111\001\002\000\004\047\112\001\002\000\004\013" +
    "\113\001\002\000\004\013\114\001\002\000\016\023\uffe5" +
    "\024\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000" +
    "\004\010\123\001\002\000\004\010\122\001\002\000\004" +
    "\036\120\001\002\000\004\010\121\001\002\000\030\004" +
    "\uffef\012\uffef\017\uffef\022\uffef\026\uffef\030\uffef\031\uffef" +
    "\036\uffef\037\uffef\045\uffef\046\uffef\001\002\000\030\004" +
    "\uffed\012\uffed\017\uffed\022\uffed\026\uffed\030\uffed\031\uffed" +
    "\036\uffed\037\uffed\045\uffed\046\uffed\001\002\000\030\004" +
    "\uffee\012\uffee\017\uffee\022\uffee\026\uffee\030\uffee\031\uffee" +
    "\036\uffee\037\uffee\045\uffee\046\uffee\001\002\000\010\023" +
    "\uffe9\024\uffe9\035\uffe9\001\002\000\016\023\uffe6\024\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\042\004" +
    "\uffc8\012\uffc8\023\uffc8\024\uffc8\026\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\001\002\000\042\004\040\012\027" +
    "\023\uffe3\024\uffe3\026\030\030\043\031\132\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\042\037\045\045\031\046\037" +
    "\047\126\001\002\000\052\004\uffca\012\uffca\023\uffca\024" +
    "\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffca\046\uffca\047\uffca\001\002\000\052\004\uffc9" +
    "\005\065\006\070\012\uffc9\023\uffc9\024\uffc9\026\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\066\042\067\045\uffc9\046\uffc9\047\uffc9\001" +
    "\002\000\004\012\133\001\002\000\004\036\134\001\002" +
    "\000\004\012\135\001\002\000\004\047\136\001\002\000" +
    "\004\013\137\001\002\000\004\013\140\001\002\000\052" +
    "\004\uffc7\012\uffc7\023\uffc7\024\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffc7\046\uffc7\047" +
    "\uffc7\001\002\000\016\023\uffe4\024\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\004\041\143\001\002\000" +
    "\012\012\144\031\041\036\042\037\045\001\002\000\012" +
    "\012\144\031\041\036\042\037\045\001\002\000\022\023" +
    "\uffe7\024\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\043\146" +
    "\044\147\001\002\000\012\012\144\031\041\036\042\037" +
    "\045\001\002\000\012\012\144\031\041\036\042\037\045" +
    "\001\002\000\064\004\uffde\005\uffde\006\uffde\007\uffde\012" +
    "\uffde\013\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\001\002\000\064\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\012\uffdf\013\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\001\002\000\014\013\154\040\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\001\002\000\006\043\146\044\147" +
    "\001\002\000\064\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012" +
    "\uffe1\013\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\001\002\000\016\023\uffec\024\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\001\002\000\006\017\ufff1\022\ufff1" +
    "\001\002\000\012\012\144\031\041\036\042\037\045\001" +
    "\002\000\012\012\144\031\041\036\042\037\045\001\002" +
    "\000\064\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6\013" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\043\146\044\147\045\uffd6\046\uffd6\047\uffd6" +
    "\001\002\000\064\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012" +
    "\uffd5\013\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\042\uffd5\043\146\044\147\045\uffd5\046\uffd5" +
    "\047\uffd5\001\002\000\004\051\167\001\002\000\060\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\045\uffce\046\uffce\047\uffce\001\002\000\060\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\012\uffd0\013\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\001\002\000\060\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\012\uffcf\013\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\001\002\000\060\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\001\002\000\014\005\065\006\070\013\171\040\066\042" +
    "\067\001\002\000\060\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\012\uffd7\013\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\042\uffd7\045\uffd7\046\uffd7\047\uffd7\001" +
    "\002\000\004\011\173\001\002\000\030\004\040\012\027" +
    "\017\ufff0\022\ufff0\026\030\030\043\031\041\036\042\037" +
    "\045\045\031\046\037\001\002\000\006\017\ufff2\022\ufff2" +
    "\001\002\000\004\017\ufff5\001\002\000\004\036\177\001" +
    "\002\000\004\010\200\001\002\000\006\017\ufffa\022\ufffa" +
    "\001\002\000\004\021\ufff9\001\002\000\004\014\203\001" +
    "\002\000\012\002\ufffe\014\ufffe\015\ufffe\016\ufffe\001\002" +
    "\000\004\036\205\001\002\000\006\010\207\041\206\001" +
    "\002\000\004\037\045\001\002\000\006\020\ufff7\021\ufff7" +
    "\001\002\000\004\010\211\001\002\000\006\020\ufff6\021" +
    "\ufff6\001\002\000\004\002\001\001\002\000\006\020\013" +
    "\021\ufff8\001\002\000\004\017\215\001\002\000\004\014" +
    "\216\001\002\000\012\002\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\001\002\000\004\036\220\001\002\000\006\020\013\021" +
    "\ufff8\001\002\000\004\017\222\001\002\000\004\014\223" +
    "\001\002\000\012\002\ufffd\014\ufffd\015\ufffd\016\ufffd\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\211" +
    "\003\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\013\006\015\013\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\200\013\014\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\006\007\020" +
    "\014\021\001\001\000\002\001\001\000\006\007\174\014" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\043\015\033\021\031\022\034\023" +
    "\032\024\035\001\001\000\012\021\031\022\151\023\032" +
    "\024\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\155\015\033" +
    "\021\031\022\034\023\032\024\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\031" +
    "\022\034\023\032\024\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\031\022\034\023\032\024\073\001\001\000\012\021\031" +
    "\022\034\023\032\024\072\001\001\000\012\021\031\022" +
    "\034\023\032\024\071\001\001\000\012\021\031\022\034" +
    "\023\032\024\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\076" +
    "\016\075\001\001\000\006\011\154\016\075\001\001\000" +
    "\006\012\104\017\103\001\001\000\012\021\031\022\034" +
    "\023\032\024\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\124\021\031\022\127\023\032\024\130" +
    "\025\126\001\001\000\006\012\123\017\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\140\021\031\022" +
    "\127\023\032\024\130\025\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\031\022\034\023\144\001\001\000\010" +
    "\021\031\022\151\023\152\001\001\000\002\001\001\000" +
    "\010\021\031\022\034\023\150\001\001\000\010\021\031" +
    "\022\034\023\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\031\022" +
    "\034\023\161\001\001\000\010\021\031\022\034\023\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\173\015\033\021\031\022\034" +
    "\023\032\024\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\213\006\015\013\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\220\006\015\013\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.)
   */
  protected Map<String, AutomatonVariable> variablesMap;
  public boolean syntaxErrors;
  AutomatonScanner scanner;
  LogManager logger;

  public AutomatonParser(AutomatonScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
      initVariablesMap();
  }
  void initVariablesMap() {
  	this.variablesMap = new HashMap<String, AutomatonVariable>();
  }
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + " Line: " + (scanner.getLine()+1) + " Column: " + scanner.getColumn();

    if (info instanceof Symbol) {
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 ))
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.INFO, errorString);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$AutomatonParser$actions {
  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= STRING_LITERAL 
            {
              AutomatonExpression RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonExpression.StringExpression(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Bool 
            {
              AutomatonExpression RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Int 
            {
              AutomatonExpression RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= CHECK OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= MATCH LABEL SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool ::= MATCH SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool ::= MATCH CURLYEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool ::= MATCH STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool ::= Bool OR Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Or(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bool ::= Bool AND Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.And(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bool ::= Bool NEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bool ::= Bool EQEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bool ::= InnerInt NEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool ::= InnerInt EQEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool ::= EXCLAMATION Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Negation(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool ::= FALSE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.False(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool ::= TRUE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.True(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ConstantInt ::= INTEGER_LITERAL 
            {
              AutomatonIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Constant(c.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InnerInt ::= Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Int ::= InnerInt MINUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Minus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Int ::= InnerInt PLUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Plus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Int ::= IDENTIFIER 
            {
              AutomatonIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.VarAccess(x.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Int ::= ConstantInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr.Constant c = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PrintArguments ::= 
            {
              List<AutomatonExpression> RESULT =null;
		 RESULT = new LinkedList<AutomatonExpression>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PrintArguments ::= Expression PrintArguments 
            {
              List<AutomatonExpression> RESULT =null;
		AutomatonExpression a = (AutomatonExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonExpression> lst = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Action ::= PRINT PrintArguments 
            {
              AutomatonAction RESULT =null;
		List<AutomatonExpression> args = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Print(args); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Action ::= DO IDENTIFIER EQ InnerInt 
            {
              AutomatonAction RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Assignment(var.toString(), i); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Actions ::= 
            {
              List<AutomatonAction> RESULT =null;
		 RESULT = new LinkedList<AutomatonAction>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Actions ::= Action Actions 
            {
              List<AutomatonAction> RESULT =null;
		AutomatonAction a = (AutomatonAction)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonAction> lst = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assertion ::= ASS Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertion",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assertions ::= 
            {
              List<AutomatonBoolExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonBoolExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Assertions ::= Assertion Assertions 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonBoolExpr> lst = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Transition ::= Bool ARROW Assertions Actions STOP SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.BOTTOM); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Transition ::= Bool ARROW Assertions Actions ERROR SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.ERROR); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Transition ::= Bool ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, follow.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Transitions ::= 
            {
              List<AutomatonTransition> RESULT =null;
		 RESULT = new LinkedList<AutomatonTransition>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Transitions ::= Transition Transitions 
            {
              List<AutomatonTransition> RESULT =null;
		AutomatonTransition t = (AutomatonTransition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonTransition> lst = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StateDef ::= STATE NONDET IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, true); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StateDef ::= STATE IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StateDefs ::= 
            {
              List<AutomatonInternalState> RESULT =null;
		 RESULT = new LinkedList<AutomatonInternalState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StateDefs ::= StateDef StateDefs 
            {
              List<AutomatonInternalState> RESULT =null;
		AutomatonInternalState s = (AutomatonInternalState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> lst = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		AutomatonIntExpr.Constant ci = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); RESULT.setValue(ci.getIntValue()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LocalDefs ::= 
            {
              Map<String,AutomatonVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, AutomatonVariable>(); */ 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,AutomatonVariable> RESULT =null;
		AutomatonVariable d = (AutomatonVariable)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Map<String,AutomatonVariable> lst = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InitDef",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Body ::= LocalDefs InitDef StateDefs 
            {
              Automaton RESULT =null;
		Map<String,AutomatonVariable> vars = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> states = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new Automaton(vars, states, init, parser.logger); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Body",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // automaton ::= AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); RESULT = b; parser.initVariablesMap(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // automaton ::= CONTROL AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); RESULT = b; parser.initVariablesMap(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // automaton ::= OBSERVER AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); b.assertObserverAutomaton();
				   RESULT = b; parser.initVariablesMap(); 
				
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              List<Automaton> RESULT =null;
		 RESULT = new LinkedList<Automaton>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		List<Automaton> start_val = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= automaton initial 
            {
              List<Automaton> RESULT =null;
		Automaton a = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<Automaton> lst = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

