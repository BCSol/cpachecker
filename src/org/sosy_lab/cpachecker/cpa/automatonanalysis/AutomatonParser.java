
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 14 13:24:38 CEST 2010
//----------------------------------------------------

package org.sosy_lab.cpachecker.cpa.automatonanalysis;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import org.sosy_lab.common.LogManager;
import java.util.logging.Level;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 14 13:24:38 CEST 2010
  */
@SuppressWarnings(value = { "all" }) public  class AutomatonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\005\000\002\002\004\000\002\004" +
    "\005\000\002\003\006\000\002\005\004\000\002\005\002" +
    "\000\002\013\006\000\002\013\010\000\002\006\004\000" +
    "\002\006\002\000\002\014\006\000\002\014\007\000\002" +
    "\007\004\000\002\007\002\000\002\015\011\000\002\015" +
    "\010\000\002\015\010\000\002\010\003\000\002\011\004" +
    "\000\002\011\002\000\002\017\004\000\002\012\004\000" +
    "\002\012\002\000\002\020\006\000\002\020\004\000\002" +
    "\020\004\000\002\020\011\000\002\022\003\000\002\022" +
    "\005\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\011\000\002\021\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\005\000\002\016\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\014\005\001\002\000\004\002\172\001" +
    "\002\000\004\033\006\001\002\000\006\015\007\016\ufffc" +
    "\001\002\000\004\033\164\001\002\000\004\002\001\001" +
    "\002\000\006\015\007\016\ufffc\001\002\000\004\016\013" +
    "\001\002\000\004\017\160\001\002\000\006\002\ufff8\017" +
    "\017\001\002\000\004\002\uffff\001\002\000\006\002\ufff8" +
    "\017\017\001\002\000\006\033\021\047\020\001\002\000" +
    "\004\033\154\001\002\000\004\011\022\001\002\000\030" +
    "\002\ufff4\004\034\012\023\017\ufff4\023\024\025\037\026" +
    "\035\033\036\034\042\042\026\043\033\001\002\000\024" +
    "\004\034\012\023\023\024\025\037\026\035\033\036\034" +
    "\042\042\026\043\033\001\002\000\012\024\144\044\146" +
    "\045\147\046\145\001\002\000\040\005\uffe6\006\uffe6\007" +
    "\uffe6\013\uffe6\020\uffe6\021\uffe6\022\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\001" +
    "\002\000\034\005\uffdf\006\uffdf\007\uffdf\013\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\037\uffdf\001\002\000\004\007\106\001\002\000\030" +
    "\002\ufff4\004\034\012\023\017\ufff4\023\024\025\037\026" +
    "\035\033\036\034\042\042\026\043\033\001\002\000\012" +
    "\035\074\037\075\040\072\041\073\001\002\000\014\005" +
    "\062\006\065\007\ufff0\035\063\037\064\001\002\000\034" +
    "\005\uffde\006\uffde\007\uffde\013\uffde\020\uffde\021\uffde\022" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde\037\uffde" +
    "\001\002\000\024\004\034\012\023\023\024\025\037\026" +
    "\035\033\036\034\042\042\026\043\033\001\002\000\004" +
    "\012\053\001\002\000\040\005\uffe4\006\uffe4\007\uffe4\013" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\004\012\043\001\002\000\034\005\uffd5\006\uffd5\007\uffd5" +
    "\013\uffd5\020\uffd5\021\uffd5\022\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\035\uffd5\037\uffd5\001\002\000\006\002\ufff7" +
    "\017\ufff7\001\002\000\042\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\013\uffe0\020\uffe0\021\uffe0\022\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\001" +
    "\002\000\006\033\044\044\045\001\002\000\004\012\047" +
    "\001\002\000\004\013\046\001\002\000\034\005\uffcf\006" +
    "\uffcf\007\uffcf\013\uffcf\020\uffcf\021\uffcf\022\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037\uffcf\001\002\000" +
    "\004\044\050\001\002\000\004\013\051\001\002\000\004" +
    "\013\052\001\002\000\034\005\uffd0\006\uffd0\007\uffd0\013" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\035\uffd0\037\uffd0\001\002\000\004\033\054\001" +
    "\002\000\004\012\055\001\002\000\004\044\056\001\002" +
    "\000\004\013\057\001\002\000\004\013\060\001\002\000" +
    "\040\005\uffe1\006\uffe1\007\uffe1\013\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\001\002\000\034\005\uffdd\006\uffdd" +
    "\007\uffdd\013\uffdd\020\uffdd\021\uffdd\022\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\035\uffdd\037\uffdd\001\002\000\024" +
    "\004\034\012\023\023\024\025\037\026\035\033\036\034" +
    "\042\042\026\043\033\001\002\000\024\004\034\012\023" +
    "\023\024\025\037\026\035\033\036\034\042\042\026\043" +
    "\033\001\002\000\024\004\034\012\023\023\024\025\037" +
    "\026\035\033\036\034\042\042\026\043\033\001\002\000" +
    "\024\004\034\012\023\023\024\025\037\026\035\033\036" +
    "\034\042\042\026\043\033\001\002\000\034\005\uffd6\006" +
    "\uffd6\007\uffd6\013\uffd6\020\uffd6\021\uffd6\022\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\035\063\037\064\001\002\000" +
    "\034\005\uffd9\006\uffd9\007\uffd9\013\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\037" +
    "\uffd9\001\002\000\034\005\uffd8\006\uffd8\007\uffd8\013\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\037\uffd8\001\002\000\034\005\uffd7\006\uffd7" +
    "\007\uffd7\013\uffd7\020\uffd7\021\uffd7\022\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\035\063\037\064\001\002\000\012" +
    "\012\076\026\035\033\036\034\042\001\002\000\012\012" +
    "\076\026\035\033\036\034\042\001\002\000\012\012\076" +
    "\026\035\033\036\034\042\001\002\000\012\012\076\026" +
    "\035\033\036\034\042\001\002\000\012\012\076\026\035" +
    "\033\036\034\042\001\002\000\040\005\uffdb\006\uffdb\007" +
    "\uffdb\013\uffdb\020\uffdb\021\uffdb\022\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\035\uffdb\037\uffdb\040\072\041\073\001" +
    "\002\000\010\013\101\040\072\041\073\001\002\000\040" +
    "\005\uffe5\006\uffe5\007\uffe5\013\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\035\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\040\005\uffda\006\uffda\007" +
    "\uffda\013\uffda\020\uffda\021\uffda\022\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\035\uffda\037\uffda\040\072\041\073\001" +
    "\002\000\040\005\uffe2\006\uffe2\007\uffe2\013\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\035" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\040\005\uffe3" +
    "\006\uffe3\007\uffe3\013\uffe3\020\uffe3\021\uffe3\022\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\001\002\000\006\002\ufff5\017\ufff5\001\002\000" +
    "\020\020\uffee\021\uffee\022\111\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\001\002\000\020\020\uffee\021\uffee\022\111\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\001\002\000\016\020\uffeb" +
    "\021\uffeb\027\117\030\113\031\114\032\uffeb\001\002\000" +
    "\024\004\034\012\023\023\024\025\037\026\035\033\036" +
    "\034\042\042\026\043\033\001\002\000\030\005\062\006" +
    "\065\020\uffed\021\uffed\022\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\035\063\037\064\001\002\000\004\033\140\001" +
    "\002\000\014\012\076\026\035\033\036\034\042\044\136" +
    "\001\002\000\016\020\uffeb\021\uffeb\027\117\030\113\031" +
    "\114\032\uffeb\001\002\000\010\020\126\021\127\032\130" +
    "\001\002\000\004\012\120\001\002\000\004\033\121\001" +
    "\002\000\004\012\122\001\002\000\004\044\123\001\002" +
    "\000\004\013\124\001\002\000\004\013\125\001\002\000" +
    "\016\020\uffe7\021\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\001\002\000\004\010\134\001\002\000\004\010\133\001" +
    "\002\000\004\033\131\001\002\000\004\010\132\001\002" +
    "\000\030\002\ufff3\004\ufff3\012\ufff3\017\ufff3\023\ufff3\025" +
    "\ufff3\026\ufff3\033\ufff3\034\ufff3\042\ufff3\043\ufff3\001\002" +
    "\000\030\002\ufff1\004\ufff1\012\ufff1\017\ufff1\023\ufff1\025" +
    "\ufff1\026\ufff1\033\ufff1\034\ufff1\042\ufff1\043\ufff1\001\002" +
    "\000\030\002\ufff2\004\ufff2\012\ufff2\017\ufff2\023\ufff2\025" +
    "\ufff2\026\ufff2\033\ufff2\034\ufff2\042\ufff2\043\ufff2\001\002" +
    "\000\010\020\uffec\021\uffec\032\uffec\001\002\000\016\020" +
    "\uffe9\021\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002" +
    "\000\022\020\uffe8\021\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\040\072\041\073\001\002\000\004\036\141\001\002" +
    "\000\012\012\076\026\035\033\036\034\042\001\002\000" +
    "\022\020\uffea\021\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\040\072\041\073\001\002\000\016\020\uffef\021\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\001\002\000\004\046\150" +
    "\001\002\000\034\005\uffd2\006\uffd2\007\uffd2\013\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\035\uffd2\037\uffd2\001\002\000\034\005\uffd4\006\uffd4\007" +
    "\uffd4\013\uffd4\020\uffd4\021\uffd4\022\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\035\uffd4\037\uffd4\001\002\000\034\005" +
    "\uffd3\006\uffd3\007\uffd3\013\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\037\uffd3\001" +
    "\002\000\034\005\uffd1\006\uffd1\007\uffd1\013\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\035" +
    "\uffd1\037\uffd1\001\002\000\014\013\101\035\074\037\075" +
    "\040\072\041\073\001\002\000\014\005\062\006\065\013" +
    "\153\035\063\037\064\001\002\000\034\005\uffdc\006\uffdc" +
    "\007\uffdc\013\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\035\uffdc\037\uffdc\001\002\000\004" +
    "\011\155\001\002\000\030\002\ufff4\004\034\012\023\017" +
    "\ufff4\023\024\025\037\026\035\033\036\034\042\042\026" +
    "\043\033\001\002\000\006\002\ufff6\017\ufff6\001\002\000" +
    "\004\002\ufff9\001\002\000\004\033\161\001\002\000\004" +
    "\010\162\001\002\000\006\002\ufffe\017\ufffe\001\002\000" +
    "\004\016\ufffd\001\002\000\004\033\165\001\002\000\006" +
    "\010\167\036\166\001\002\000\004\034\042\001\002\000" +
    "\006\015\ufffb\016\ufffb\001\002\000\004\010\171\001\002" +
    "\000\006\015\ufffa\016\ufffa\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\007\005\011\013\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\162\013" +
    "\010\001\001\000\004\003\013\001\001\000\002\001\001" +
    "\000\006\006\014\014\015\001\001\000\002\001\001\000" +
    "\006\006\156\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\040\010\026\015" +
    "\027\016\037\021\024\022\030\023\031\001\001\000\012" +
    "\016\037\021\024\022\150\023\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\104\010\026\015\027\016\037\021\024\022" +
    "\030\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\037\021\024\022\030\023" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\037" +
    "\021\024\022\030\023\070\001\001\000\012\016\037\021" +
    "\024\022\030\023\067\001\001\000\012\016\037\021\024" +
    "\022\030\023\066\001\001\000\012\016\037\021\024\022" +
    "\030\023\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\024\022" +
    "\103\001\001\000\006\021\024\022\102\001\001\000\006" +
    "\021\024\022\101\001\001\000\006\021\024\022\076\001" +
    "\001\000\006\021\024\022\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\107\017\106\001\001\000\006\011\142\017\106\001" +
    "\001\000\006\012\115\020\114\001\001\000\012\016\037" +
    "\021\024\022\030\023\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\024\022\136\001\001\000\006" +
    "\012\134\020\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\024\022\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\155\010\026\015\027\016" +
    "\037\021\024\022\030\023\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.)
   */
  protected Map<String, AutomatonVariable> variablesMap = new HashMap<String, AutomatonVariable>();
  public boolean syntaxErrors;
  AutomatonScanner scanner;
  LogManager logger;

  public AutomatonParser(AutomatonScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
  }
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + " Line: " + (scanner.getLine()+1) + " Column: " + scanner.getColumn();

    if (info instanceof Symbol) {
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 ))
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.INFO, errorString);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$AutomatonParser$actions {
  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Trigger ::= CHECK OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Trigger ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Trigger ::= MATCH LABEL SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Trigger ::= MATCH SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Trigger ::= MATCH CURLYEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Trigger ::= MATCH STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Trigger",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bool ::= Trigger 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr t = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool ::= Bool OR Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Or(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bool ::= Bool AND Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.And(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool ::= Bool NEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool ::= Bool EQEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool ::= Int NEQ Int 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bool ::= Int EQEQ Int 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bool ::= EXCLAMATION Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Negation(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bool ::= FALSE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.False(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bool ::= TRUE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.True(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ConstantInt ::= INTEGER_LITERAL 
            {
              AutomatonIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Constant(c.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Int ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Int ::= Int MINUS Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Minus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Int ::= Int PLUS Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Plus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Int ::= IDENTIFIER 
            {
              AutomatonIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.VarAccess(x.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Int ::= ConstantInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr.Constant c = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonActionExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonActionExpr.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Action ::= PRINT Int 
            {
              AutomatonActionExpr RESULT =null;
		AutomatonIntExpr int_expr = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonActionExpr.PrintInt(int_expr); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Action ::= PRINT STRING_LITERAL 
            {
              AutomatonActionExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonActionExpr.Print(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Action ::= DO IDENTIFIER EQ Int 
            {
              AutomatonActionExpr RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonActionExpr.Assignment(var.toString(), i); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Actions ::= 
            {
              List<AutomatonActionExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonActionExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Actions ::= Action Actions 
            {
              List<AutomatonActionExpr> RESULT =null;
		AutomatonActionExpr a = (AutomatonActionExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonActionExpr> lst = (List<AutomatonActionExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Assertion ::= ASS Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertion",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Assertions ::= 
            {
              List<AutomatonBoolExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonBoolExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Assertions ::= Assertion Assertions 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonBoolExpr> lst = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Triggers ::= Bool 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr t = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = Collections.singletonList(t); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Triggers",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Transition ::= Triggers ARROW Assertions Actions STOP SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		List<AutomatonBoolExpr> triggers = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonActionExpr> acts = (List<AutomatonActionExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(triggers, ass, acts, AutomatonInternalState.BOTTOM); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Transition ::= Triggers ARROW Assertions Actions ERROR SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		List<AutomatonBoolExpr> triggers = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonActionExpr> acts = (List<AutomatonActionExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(triggers, ass, acts, AutomatonInternalState.ERROR); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Transition ::= Triggers ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		List<AutomatonBoolExpr> triggers = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AutomatonActionExpr> acts = (List<AutomatonActionExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonTransition(triggers, ass, acts, follow.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Transitions ::= 
            {
              List<AutomatonTransition> RESULT =null;
		 RESULT = new LinkedList<AutomatonTransition>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Transitions ::= Transition Transitions 
            {
              List<AutomatonTransition> RESULT =null;
		AutomatonTransition t = (AutomatonTransition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonTransition> lst = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StateDef ::= STATE NONDET IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, true); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StateDef ::= STATE IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StateDefs ::= 
            {
              List<AutomatonInternalState> RESULT =null;
		 RESULT = new LinkedList<AutomatonInternalState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // StateDefs ::= StateDef StateDefs 
            {
              List<AutomatonInternalState> RESULT =null;
		AutomatonInternalState s = (AutomatonInternalState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> lst = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		AutomatonIntExpr.Constant ci = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 
             RESULT = new AutomatonVariable(type.toString(),
             name.toString());
             if (ci.canEvaluateOn(AutomatonExpressionArguments.emptyArguments)) {
             	RESULT.setValue(ci.eval());
             } else {
             	throw new InvalidAutomatonException("Could not initialize the Variable \"" + name.toString() +"\"");
             }
             
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LocalDefs ::= 
            {
              Map<String,AutomatonVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, AutomatonVariable>(); */ 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,AutomatonVariable> RESULT =null;
		AutomatonVariable d = (AutomatonVariable)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Map<String,AutomatonVariable> lst = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InitDef",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= LocalDefs InitDef StateDefs 
            {
              Automaton RESULT =null;
		Map<String,AutomatonVariable> vars = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> states = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new Automaton(vars, states, init, parser.logger); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Body",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Automaton start_val = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= AUTOMATON IDENTIFIER Body 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 b.setName(id.toString()); RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

