
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package org.sosy_lab.cpachecker.cpa.automatonanalysis;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import org.sosy_lab.common.LogManager;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.configuration.Configuration;
import java.util.logging.Level;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class AutomatonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\010\000\002\003\010\000\002\003\007" +
    "\000\002\003\004\000\002\005\005\000\002\004\006\000" +
    "\002\006\004\000\002\006\002\000\002\013\006\000\002" +
    "\013\010\000\002\007\004\000\002\007\002\000\002\014" +
    "\006\000\002\014\007\000\002\014\007\000\002\010\004" +
    "\000\002\010\002\000\002\015\011\000\002\015\010\000" +
    "\002\015\010\000\002\011\004\000\002\011\002\000\002" +
    "\016\004\000\002\012\004\000\002\012\002\000\002\017" +
    "\006\000\002\017\004\000\002\017\011\000\002\017\010" +
    "\000\002\020\004\000\002\020\002\000\002\022\003\000" +
    "\002\022\005\000\002\022\003\000\002\022\005\000\002" +
    "\022\005\000\002\023\003\000\002\023\011\000\002\023" +
    "\010\000\002\021\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\005\000\002\024\011" +
    "\000\002\024\010\000\002\024\006\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\011\000\002" +
    "\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\002\uffff\015\007\016\011\017\006\026" +
    "\012\001\002\000\004\010\246\001\002\000\004\002\245" +
    "\001\002\000\004\015\240\001\002\000\004\037\234\001" +
    "\002\000\014\002\uffff\015\007\016\011\017\006\026\012" +
    "\001\002\000\004\015\110\001\002\000\024\004\023\013" +
    "\013\027\014\031\026\032\025\037\024\040\027\046\016" +
    "\047\021\001\002\000\024\004\023\013\013\027\014\031" +
    "\026\032\025\037\024\040\027\046\016\047\021\001\002" +
    "\000\012\030\101\050\103\051\104\052\102\001\002\000" +
    "\066\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf" +
    "\014\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\001\002\000\062\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\013\uffd6\014\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\043\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\001\002\000\012\041\067\043\070\044\065\045\066" +
    "\001\002\000\066\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\013\uffda\014\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\001\002\000\062\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\013\uffd5\014\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\001\002\000\032\005\055\006\057\010" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\041\056\043\060\001\002\000\024\004\023\013" +
    "\013\027\014\031\026\032\025\037\024\040\027\046\016" +
    "\047\021\001\002\000\066\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\013\uffdd\014\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\001\002\000\004\013\043\001" +
    "\002\000\004\013\030\001\002\000\066\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002\000\006" +
    "\037\031\050\032\001\002\000\006\011\034\013\035\001" +
    "\002\000\004\014\033\001\002\000\062\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\013\uffc6\014\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\001\002\000\004\050\041\001\002" +
    "\000\004\050\036\001\002\000\004\014\037\001\002\000" +
    "\004\014\040\001\002\000\062\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\013\uffc8\014\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\001\002\000\004\014\042\001\002\000\062" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7\014" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\043\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\004" +
    "\037\044\001\002\000\006\011\045\013\046\001\002\000" +
    "\004\050\052\001\002\000\004\050\047\001\002\000\004" +
    "\014\050\001\002\000\004\014\051\001\002\000\066\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\001" +
    "\002\000\004\014\053\001\002\000\066\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001\002\000\062" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\013\uffd4\014" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\043\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002\000\024" +
    "\004\023\013\013\027\014\031\026\032\025\037\024\040" +
    "\027\046\016\047\021\001\002\000\024\004\023\013\013" +
    "\027\014\031\026\032\025\037\024\040\027\046\016\047" +
    "\021\001\002\000\024\004\023\013\013\027\014\031\026" +
    "\032\025\037\024\040\027\046\016\047\021\001\002\000" +
    "\024\004\023\013\013\027\014\031\026\032\025\037\024" +
    "\040\027\046\016\047\021\001\002\000\062\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\001\002\000\062\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\056\043\060" +
    "\046\uffcd\047\uffcd\050\uffcd\001\002\000\062\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\001\002\000\062\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\013\uffce\014\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\056\043\060" +
    "\046\uffce\047\uffce\050\uffce\001\002\000\012\013\071\032" +
    "\025\037\024\040\027\001\002\000\012\013\071\032\025" +
    "\037\024\040\027\001\002\000\012\013\071\032\025\037" +
    "\024\040\027\001\002\000\012\013\071\032\025\037\024" +
    "\040\027\001\002\000\012\013\071\032\025\037\024\040" +
    "\027\001\002\000\066\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\013\uffd2\014\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\065\045\066\046" +
    "\uffd2\047\uffd2\050\uffd2\001\002\000\014\014\075\041\uffda" +
    "\043\uffda\044\uffda\045\uffda\001\002\000\006\044\065\045" +
    "\066\001\002\000\066\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\013\uffde\014\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\001\002\000\066\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\013\uffd1\014\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044" +
    "\065\045\066\046\uffd1\047\uffd1\050\uffd1\001\002\000\066" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\014" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\001\002\000\066\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\013\uffdc\014\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\001\002\000\004\052\105\001\002\000" +
    "\062\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\013\uffca" +
    "\014\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\043\uffca\046\uffca\047\uffca\050\uffca\001\002\000" +
    "\062\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\013\uffcc" +
    "\014\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000" +
    "\062\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\013\uffcb" +
    "\014\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000" +
    "\062\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9" +
    "\014\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\043\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000" +
    "\014\005\055\006\057\014\107\041\056\043\060\001\002" +
    "\000\062\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013" +
    "\uffd3\014\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\043\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002" +
    "\000\004\037\111\001\002\000\006\021\112\022\ufff7\001" +
    "\002\000\004\037\225\001\002\000\006\021\112\022\ufff7" +
    "\001\002\000\004\020\222\001\002\000\004\022\116\001" +
    "\002\000\004\023\217\001\002\000\006\020\ufff3\023\122" +
    "\001\002\000\004\020\ufffa\001\002\000\006\020\ufff3\023" +
    "\122\001\002\000\010\037\125\053\124\054\123\001\002" +
    "\000\004\037\213\001\002\000\004\037\210\001\002\000" +
    "\004\012\126\001\002\000\030\004\023\013\013\020\uffee" +
    "\023\uffee\027\014\031\026\032\025\037\024\040\027\046" +
    "\016\047\021\001\002\000\030\004\023\013\013\020\uffee" +
    "\023\uffee\027\014\031\026\032\025\037\024\040\027\046" +
    "\016\047\021\001\002\000\014\005\055\006\057\007\132" +
    "\041\056\043\060\001\002\000\006\020\ufff2\023\ufff2\001" +
    "\002\000\020\024\uffe9\025\uffe9\026\012\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\001\002\000\020\024\uffe9\025\uffe9\026" +
    "\012\033\uffe9\034\uffe9\035\uffe9\036\uffe9\001\002\000\016" +
    "\024\uffe6\025\uffe6\033\141\034\135\035\136\036\uffe6\001" +
    "\002\000\004\037\203\001\002\000\042\004\023\013\013" +
    "\024\uffe0\025\uffe0\027\014\031\026\032\170\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\024\040\027\046\016\047\021" +
    "\050\164\001\002\000\016\024\uffe6\025\uffe6\033\141\034" +
    "\135\035\136\036\uffe6\001\002\000\010\024\153\025\154" +
    "\036\155\001\002\000\004\013\142\001\002\000\004\037" +
    "\143\001\002\000\006\011\144\013\145\001\002\000\004" +
    "\050\151\001\002\000\004\050\146\001\002\000\004\014" +
    "\147\001\002\000\004\014\150\001\002\000\016\024\uffe3" +
    "\025\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000" +
    "\004\014\152\001\002\000\016\024\uffe2\025\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\001\002\000\004\010\161\001" +
    "\002\000\004\010\160\001\002\000\004\037\156\001\002" +
    "\000\004\010\157\001\002\000\030\004\uffed\013\uffed\020" +
    "\uffed\023\uffed\027\uffed\031\uffed\032\uffed\037\uffed\040\uffed" +
    "\046\uffed\047\uffed\001\002\000\030\004\uffeb\013\uffeb\020" +
    "\uffeb\023\uffeb\027\uffeb\031\uffeb\032\uffeb\037\uffeb\040\uffeb" +
    "\046\uffeb\047\uffeb\001\002\000\030\004\uffec\013\uffec\020" +
    "\uffec\023\uffec\027\uffec\031\uffec\032\uffec\037\uffec\040\uffec" +
    "\046\uffec\047\uffec\001\002\000\010\024\uffe7\025\uffe7\036" +
    "\uffe7\001\002\000\016\024\uffe4\025\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\001\002\000\042\004\uffc3\013\uffc3\024" +
    "\uffc3\025\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\001\002\000\042\004\023\013\013\024\uffe0\025\uffe0" +
    "\027\014\031\026\032\170\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\024\040\027\046\016\047\021\050\164\001\002" +
    "\000\052\004\uffc5\013\uffc5\024\uffc5\025\uffc5\027\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffda\043\uffda\044\uffda\045\uffda\046\uffc5\047" +
    "\uffc5\050\uffc5\001\002\000\052\004\uffc4\005\055\006\057" +
    "\013\uffc4\024\uffc4\025\uffc4\027\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\056" +
    "\043\060\046\uffc4\047\uffc4\050\uffc4\001\002\000\004\013" +
    "\171\001\002\000\004\037\172\001\002\000\006\011\173" +
    "\013\174\001\002\000\004\050\200\001\002\000\004\050" +
    "\175\001\002\000\004\014\176\001\002\000\004\014\177" +
    "\001\002\000\052\004\uffc2\013\uffc2\024\uffc2\025\uffc2\027" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\004\014\201\001\002" +
    "\000\052\004\uffc1\013\uffc1\024\uffc1\025\uffc1\027\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffc1\047" +
    "\uffc1\050\uffc1\001\002\000\016\024\uffe1\025\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\001\002\000\004\042\204\001" +
    "\002\000\012\013\071\032\025\037\024\040\027\001\002" +
    "\000\022\024\uffe5\025\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\044\065\045\066\001\002\000\016\024\uffea\025\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\001\002\000\006\020" +
    "\uffef\023\uffef\001\002\000\004\012\211\001\002\000\030" +
    "\004\023\013\013\020\uffee\023\uffee\027\014\031\026\032" +
    "\025\037\024\040\027\046\016\047\021\001\002\000\006" +
    "\020\ufff1\023\ufff1\001\002\000\004\012\214\001\002\000" +
    "\030\004\023\013\013\020\uffee\023\uffee\027\014\031\026" +
    "\032\025\037\024\040\027\046\016\047\021\001\002\000" +
    "\006\020\ufff0\023\ufff0\001\002\000\004\020\ufff4\001\002" +
    "\000\004\037\220\001\002\000\004\010\221\001\002\000" +
    "\006\020\ufff9\023\ufff9\001\002\000\004\015\223\001\002" +
    "\000\014\002\ufffe\015\ufffe\016\ufffe\017\ufffe\026\ufffe\001" +
    "\002\000\004\022\ufff8\001\002\000\004\037\226\001\002" +
    "\000\006\010\230\042\227\001\002\000\004\040\027\001" +
    "\002\000\006\021\ufff6\022\ufff6\001\002\000\004\010\232" +
    "\001\002\000\006\021\ufff5\022\ufff5\001\002\000\004\002" +
    "\001\001\002\000\006\021\112\022\ufff7\001\002\000\004" +
    "\020\236\001\002\000\004\015\237\001\002\000\014\002" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\026\ufffc\001\002\000\004" +
    "\037\241\001\002\000\006\021\112\022\ufff7\001\002\000" +
    "\004\020\243\001\002\000\004\015\244\001\002\000\014" +
    "\002\ufffd\015\ufffd\016\ufffd\017\ufffd\026\ufffd\001\002\000" +
    "\004\002\000\001\002\000\014\002\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\026\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\010\002\004\003\007\016\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\232\003\007\016\003\001\001\000" +
    "\002\001\001\000\012\021\014\022\017\023\016\024\021" +
    "\001\001\000\012\021\014\022\072\023\016\024\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\014\022\017\023\016\024\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\014\022\017\023\016\024\063\001\001\000\012\021" +
    "\014\022\017\023\016\024\062\001\001\000\012\021\014" +
    "\022\017\023\016\024\061\001\001\000\012\021\014\022" +
    "\017\023\016\024\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\014\022\017\023\077\001\001\000\010\021\014\022\017" +
    "\023\076\001\001\000\010\021\014\022\017\023\075\001" +
    "\001\000\010\021\014\022\017\023\071\001\001\000\010" +
    "\021\014\022\072\023\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\113\006\114\013\112\001\001" +
    "\000\002\001\001\000\006\006\223\013\112\001\001\000" +
    "\002\001\001\000\004\004\116\001\001\000\002\001\001" +
    "\000\006\007\117\014\120\001\001\000\002\001\001\000" +
    "\006\007\215\014\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\130\015\126\021\014\022\017\023\016\024\127\001\001" +
    "\000\016\010\206\015\126\021\014\022\017\023\016\024" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\133\016\132\001\001\000\006\011\205\016\132\001" +
    "\001\000\006\012\137\017\136\001\001\000\002\001\001" +
    "\000\016\020\162\021\014\022\165\023\016\024\166\025" +
    "\164\001\001\000\006\012\161\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\201\021\014\022\165\023" +
    "\016\024\166\025\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\014\022\017\023\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\211\015\126\021\014\022\017\023\016\024\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\214" +
    "\015\126\021\014\022\017\023\016\024\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\234" +
    "\006\114\013\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\241" +
    "\006\114\013\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.)
   */
  protected Map<String, AutomatonVariable> variablesMap;
  public boolean syntaxErrors;
  AutomatonScanner scanner;
  LogManager logger;
  // this int is used to determine unique names for anonymous automata
  private static int anonymousCounter;

  public AutomatonParser(AutomatonScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
      initVariablesMap();
  }
  void initVariablesMap() {
  	this.variablesMap = new HashMap<String, AutomatonVariable>();
  }
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + " Line: " + (scanner.getLine()+1) + " Column: " + scanner.getColumn();

    if (info instanceof Symbol) {
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 ))
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.INFO, errorString);
  }
  
  public Automaton generateSkeletonForAssertion(AutomatonBoolExpr pA) throws InvalidAutomatonException {
    AutomatonTransition trans = new AutomatonTransition(
        AutomatonBoolExpr.TRUE, 
        Collections.singletonList(pA),
        Collections.<AutomatonAction>emptyList(),
        "OK");
    AutomatonInternalState okState = new AutomatonInternalState("OK", 
        Collections.singletonList(trans));
    Automaton ret = new Automaton(Collections.<String, AutomatonVariable>emptyMap(), 
        Collections.singletonList(okState), "OK", logger);
    ret.setName("AnonymousAutomaton" + anonymousCounter++);
    return ret;
  }
  /**
  * Parses a Specification File and returns the Automata found in the file.
  */
  public static List<Automaton> parseAutomatonFile(File pInputFile, Configuration config, LogManager pLogger) throws InvalidConfigurationException {
    SymbolFactory sf = new ComplexSymbolFactory();
    FileInputStream input = null;
    try {
      input = new FileInputStream(pInputFile);
      Symbol symbol = new AutomatonParser(new AutomatonScanner(input, config, pLogger, sf),sf, pLogger).parse();
      return ((List<Automaton>) symbol.value);
      //return (Automaton)symbol.value;
    } catch (Exception e) {
      pLogger.logException(Level.FINER, e, "Could not load automaton from file " + pInputFile.getAbsolutePath());
      throw new InvalidConfigurationException("Could not load automaton from file " + pInputFile.getAbsolutePath()
          + " (" + (e.getMessage() != null ? e.getMessage() : e.getClass().getSimpleName()) + ")");
    } finally {
      if (input!= null) {
        try {
          input.close();
        } catch (IOException e) {
          throw new InvalidConfigurationException(
              "IO Exception when closing the FileStream to \"" + pInputFile.getAbsolutePath() + "\": "+e.getMessage());
        }
      }
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$AutomatonParser$actions {
  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= STRING_LITERAL 
            {
              AutomatonExpression RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonExpression.StringExpression(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= Bool 
            {
              AutomatonExpression RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= Int 
            {
              AutomatonExpression RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bool ::= CHECK OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool ::= MATCH LABEL SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool ::= MATCH SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= MATCH CURLYEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= MATCH STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= Bool OR Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Or(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool ::= Bool AND Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.And(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool ::= Bool NEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool ::= Bool EQEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool ::= InnerInt NEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bool ::= InnerInt EQEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bool ::= EXCLAMATION Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Negation(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bool ::= FALSE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.FALSE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool ::= TRUE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.TRUE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ConstantInt ::= INTEGER_LITERAL 
            {
              AutomatonIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Constant(c.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InnerInt ::= Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Int ::= InnerInt MINUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Minus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Int ::= InnerInt PLUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Plus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Int ::= IDENTIFIER 
            {
              AutomatonIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.VarAccess(x.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Int ::= ConstantInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr.Constant c = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PrintArguments ::= 
            {
              List<AutomatonExpression> RESULT =null;
		 RESULT = new LinkedList<AutomatonExpression>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PrintArguments ::= Expression PrintArguments 
            {
              List<AutomatonExpression> RESULT =null;
		AutomatonExpression a = (AutomatonExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonExpression> lst = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Action ::= PRINT PrintArguments 
            {
              AutomatonAction RESULT =null;
		List<AutomatonExpression> args = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Print(args); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Action ::= DO IDENTIFIER EQ InnerInt 
            {
              AutomatonAction RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Assignment(var.toString(), i); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Actions ::= 
            {
              List<AutomatonAction> RESULT =null;
		 RESULT = new LinkedList<AutomatonAction>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Actions ::= Action Actions 
            {
              List<AutomatonAction> RESULT =null;
		AutomatonAction a = (AutomatonAction)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonAction> lst = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assertion ::= ASS Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertion",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assertions ::= 
            {
              List<AutomatonBoolExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonBoolExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assertions ::= Assertion Assertions 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonBoolExpr> lst = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Transition ::= Bool ARROW Assertions Actions STOP SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.BOTTOM); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Transition ::= Bool ARROW Assertions Actions ERROR SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.ERROR); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Transition ::= Bool ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, follow.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Transitions ::= 
            {
              List<AutomatonTransition> RESULT =null;
		 RESULT = new LinkedList<AutomatonTransition>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Transitions ::= Transition Transitions 
            {
              List<AutomatonTransition> RESULT =null;
		AutomatonTransition t = (AutomatonTransition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonTransition> lst = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StateDef ::= STATE USEFIRST IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, false); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StateDef ::= STATE USEALL IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, true); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StateDef ::= STATE IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, true); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StateDefs ::= 
            {
              List<AutomatonInternalState> RESULT =null;
		 RESULT = new LinkedList<AutomatonInternalState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StateDefs ::= StateDef StateDefs 
            {
              List<AutomatonInternalState> RESULT =null;
		AutomatonInternalState s = (AutomatonInternalState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> lst = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		AutomatonIntExpr.Constant ci = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); RESULT.setValue(ci.getIntValue()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LocalDefs ::= 
            {
              Map<String,AutomatonVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, AutomatonVariable>(); */ 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,AutomatonVariable> RESULT =null;
		AutomatonVariable d = (AutomatonVariable)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Map<String,AutomatonVariable> lst = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InitDef",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Body ::= LocalDefs InitDef StateDefs 
            {
              Automaton RESULT =null;
		Map<String,AutomatonVariable> vars = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> states = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new Automaton(vars, states, init, parser.logger); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Body",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // automaton ::= Assertion SEMICOLON 
            {
              Automaton RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = parser.generateSkeletonForAssertion(a); parser.initVariablesMap(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // automaton ::= AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); RESULT = b; parser.initVariablesMap(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // automaton ::= CONTROL AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); RESULT = b; parser.initVariablesMap(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // automaton ::= OBSERVER AUTOMATON IDENTIFIER Body END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 b.setName(id.toString()); b.assertObserverAutomaton();
				   RESULT = b; parser.initVariablesMap(); 
				
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              List<Automaton> RESULT =null;
		 RESULT = new LinkedList<Automaton>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		List<Automaton> start_val = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= automaton initial 
            {
              List<Automaton> RESULT =null;
		Automaton a = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<Automaton> lst = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

