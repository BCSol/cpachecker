
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 30 14:52:09 CEST 2010
//----------------------------------------------------

package cpa.observeranalysis;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import cpa.common.LogManager;
import java.util.logging.Level;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 30 14:52:09 CEST 2010
  */
@SuppressWarnings(value = { "all" }) public  class ObserverParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ObserverParser() {super();}

  /** Constructor which sets the default scanner. */
  public ObserverParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ObserverParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\005\005\000\002\004\006" +
    "\000\002\006\004\000\002\006\002\000\002\014\006\000" +
    "\002\014\010\000\002\007\004\000\002\007\002\000\002" +
    "\015\006\000\002\010\004\000\002\010\002\000\002\016" +
    "\011\000\002\011\004\000\002\011\002\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\011\000" +
    "\002\012\004\000\002\012\002\000\002\020\004\000\002" +
    "\013\004\000\002\013\002\000\002\021\006\000\002\021" +
    "\004\000\002\021\004\000\002\023\003\000\002\023\005" +
    "\000\002\023\003\000\002\023\005\000\002\023\005\000" +
    "\002\022\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\010\014\006\015\005\016\ufffa\001\002\000" +
    "\004\002\136\001\002\000\004\026\130\001\002\000\004" +
    "\026\127\001\002\000\006\015\005\016\ufffa\001\002\000" +
    "\006\015\005\016\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\016\013\001\002\000\004\017\122\001\002\000" +
    "\006\002\ufff6\017\017\001\002\000\004\002\ufffd\001\002" +
    "\000\006\002\ufff6\017\017\001\002\000\004\026\020\001" +
    "\002\000\004\011\021\001\002\000\014\002\ufff3\007\ufff0" +
    "\017\ufff3\021\024\022\022\001\002\000\004\012\113\001" +
    "\002\000\010\007\ufff0\021\024\022\022\001\002\000\010" +
    "\037\110\040\111\041\107\001\002\000\014\002\ufff3\007" +
    "\ufff0\017\ufff3\021\024\022\022\001\002\000\004\007\030" +
    "\001\002\000\006\002\ufff5\017\ufff5\001\002\000\012\020" +
    "\033\023\uffea\024\uffea\025\uffea\001\002\000\012\020\033" +
    "\023\uffea\024\uffea\025\uffea\001\002\000\010\023\070\024" +
    "\071\025\uffe7\001\002\000\016\004\042\012\034\026\043" +
    "\027\044\035\035\036\041\001\002\000\016\004\042\012" +
    "\034\026\043\027\044\035\035\036\041\001\002\000\020" +
    "\005\uffdd\006\uffdd\013\uffdd\020\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\001\002\000\030\005\uffe3\006\uffe3\013\uffe3\020\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\001\002\000\012\030\054\032\055\033\052\034\053" +
    "\001\002\000\016\005\046\006\047\020\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\001\002\000\020\005\uffdc\006\uffdc\013\uffdc" +
    "\020\uffdc\023\uffdc\024\uffdc\025\uffdc\001\002\000\016\004" +
    "\042\012\034\026\043\027\044\035\035\036\041\001\002" +
    "\000\030\005\uffe1\006\uffe1\013\uffe1\020\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002" +
    "\000\032\005\uffde\006\uffde\010\uffde\013\uffde\020\uffde\023" +
    "\uffde\024\uffde\025\uffde\030\uffde\032\uffde\033\uffde\034\uffde" +
    "\001\002\000\020\005\uffdb\006\uffdb\013\uffdb\020\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\001\002\000\016\004\042\012\034" +
    "\026\043\027\044\035\035\036\041\001\002\000\016\004" +
    "\042\012\034\026\043\027\044\035\035\036\041\001\002" +
    "\000\020\005\uffd6\006\uffd6\013\uffd6\020\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\001\002\000\020\005\uffd7\006\uffd7\013\uffd7" +
    "\020\uffd7\023\uffd7\024\uffd7\025\uffd7\001\002\000\010\012" +
    "\056\026\043\027\044\001\002\000\010\012\056\026\043" +
    "\027\044\001\002\000\010\012\056\026\043\027\044\001" +
    "\002\000\010\012\056\026\043\027\044\001\002\000\010" +
    "\012\056\026\043\027\044\001\002\000\024\005\uffd9\006" +
    "\uffd9\013\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9\033\052" +
    "\034\053\001\002\000\010\013\061\033\052\034\053\001" +
    "\002\000\030\005\uffe2\006\uffe2\013\uffe2\020\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\001" +
    "\002\000\024\005\uffd8\006\uffd8\013\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\033\052\034\053\001\002\000\030\005" +
    "\uffdf\006\uffdf\013\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\030\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\030\005" +
    "\uffe0\006\uffe0\013\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\030\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000\014\013" +
    "\061\030\054\032\055\033\052\034\053\001\002\000\010" +
    "\005\046\006\047\013\067\001\002\000\020\005\uffda\006" +
    "\uffda\013\uffda\020\uffda\023\uffda\024\uffda\025\uffda\001\002" +
    "\000\004\026\102\001\002\000\012\012\056\026\043\027" +
    "\044\037\100\001\002\000\010\023\070\024\071\025\uffe7" +
    "\001\002\000\004\025\074\001\002\000\004\026\075\001" +
    "\002\000\004\010\076\001\002\000\014\002\ufff2\007\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\001\002\000\004\025\uffe8\001" +
    "\002\000\010\023\uffe5\024\uffe5\025\uffe5\001\002\000\014" +
    "\023\uffe4\024\uffe4\025\uffe4\033\052\034\053\001\002\000" +
    "\004\031\103\001\002\000\010\012\056\026\043\027\044" +
    "\001\002\000\014\023\uffe6\024\uffe6\025\uffe6\033\052\034" +
    "\053\001\002\000\010\023\uffeb\024\uffeb\025\uffeb\001\002" +
    "\000\006\002\ufff4\017\ufff4\001\002\000\010\007\uffed\021" +
    "\uffed\022\uffed\001\002\000\010\007\uffef\021\uffef\022\uffef" +
    "\001\002\000\010\007\uffee\021\uffee\022\uffee\001\002\000" +
    "\004\007\ufff1\001\002\000\004\026\114\001\002\000\004" +
    "\012\115\001\002\000\004\037\116\001\002\000\004\013" +
    "\117\001\002\000\004\013\120\001\002\000\010\007\uffec" +
    "\021\uffec\022\uffec\001\002\000\004\002\ufff7\001\002\000" +
    "\004\026\123\001\002\000\004\010\124\001\002\000\006" +
    "\002\ufffc\017\ufffc\001\002\000\004\016\ufffb\001\002\000" +
    "\004\002\001\001\002\000\006\015\ufffe\016\ufffe\001\002" +
    "\000\004\026\131\001\002\000\006\010\133\031\132\001" +
    "\002\000\004\027\044\001\002\000\006\015\ufff9\016\ufff9" +
    "\001\002\000\004\010\135\001\002\000\006\015\ufff8\016" +
    "\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\014\002\003\003\006\005\010\006\011\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\125\006\011\014\007\001\001\000" +
    "\006\006\124\014\007\001\001\000\002\001\001\000\004" +
    "\004\013\001\001\000\002\001\001\000\006\007\014\015" +
    "\015\001\001\000\002\001\001\000\006\007\120\015\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\026\011\025\016\024\017\022\001\001\000\002\001\001" +
    "\000\006\011\111\017\022\001\001\000\002\001\001\000" +
    "\012\010\105\011\025\016\024\017\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\031\020\030\001" +
    "\001\000\006\012\104\020\030\001\001\000\006\013\072" +
    "\021\071\001\001\000\010\022\035\023\036\024\037\001" +
    "\001\000\010\022\035\023\064\024\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\035\023\036\024\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\035\023\036\024\050\001\001\000\010" +
    "\022\035\023\036\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\035\023\063\001\001\000\006" +
    "\022\035\023\062\001\001\000\006\022\035\023\061\001" +
    "\001\000\006\022\035\023\056\001\001\000\006\022\035" +
    "\023\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\035\023\100\001\001" +
    "\000\006\013\076\021\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\035\023\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ObserverParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ObserverParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ObserverParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.) 
   */
  protected Map<String, ObserverVariable> variablesMap = new HashMap<String, ObserverVariable>();
  public boolean syntaxErrors;
  ObserverScanner scanner;
  LogManager logger;

  public ObserverParser(ObserverScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
  }
  
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + "ScannerLine: " + (scanner.getLine()+1) + " ScannerColumn: " + scanner.getColumn();
    
    if (info instanceof Symbol) { 
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 )) 
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.FINER, errorString);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$ObserverParser$actions {
  private final ObserverParser parser;

  /** Constructor */
  CUP$ObserverParser$actions(ObserverParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ObserverParser$do_action(
    int                        CUP$ObserverParser$act_num,
    java_cup.runtime.lr_parser CUP$ObserverParser$parser,
    java.util.Stack            CUP$ObserverParser$stack,
    int                        CUP$ObserverParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ObserverParser$result;

      /* select the action based on the action number */
      switch (CUP$ObserverParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool ::= Bool OR Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.Or(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bool ::= Bool AND Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.And(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool ::= Int NEQ Int 
            {
              ObserverBoolExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.NotEqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool ::= Int EQEQ Int 
            {
              ObserverBoolExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.EqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bool ::= EXCLAMATION Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.Negation(b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bool ::= FALSE 
            {
              ObserverBoolExpr RESULT =null;
		 RESULT = new ObserverBoolExpr.False(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bool ::= TRUE 
            {
              ObserverBoolExpr RESULT =null;
		 RESULT = new ObserverBoolExpr.True(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstantInt ::= INTEGER_LITERAL 
            {
              ObserverIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Constant(c.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",16, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Int ::= Int MINUS Int 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Minus(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Int ::= Int PLUS Int 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Plus(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Int ::= IDENTIFIER 
            {
              ObserverIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.VarAccess(x.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr i = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = i; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Int ::= ConstantInt 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr.Constant c = (ObserverIntExpr.Constant)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Action ::= PRINT Int 
            {
              ObserverActionExpr RESULT =null;
		ObserverIntExpr int_expr = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.PrintInt(int_expr); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Action ::= PRINT STRING_LITERAL 
            {
              ObserverActionExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.Print(lit.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Action ::= DO IDENTIFIER EQ Int 
            {
              ObserverActionExpr RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr i = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.Assignment(var.toString(), i); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Actions ::= 
            {
              List<ObserverActionExpr> RESULT =null;
		 RESULT = new LinkedList<ObserverActionExpr>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Actions ::= Action Actions 
            {
              List<ObserverActionExpr> RESULT =null;
		ObserverActionExpr a = (ObserverActionExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverActionExpr> lst = (List<ObserverActionExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assertion ::= ASS Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertion",14, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assertions ::= 
            {
              List<ObserverBoolExpr> RESULT =null;
		 RESULT = new LinkedList<ObserverBoolExpr>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assertions ::= Assertion Assertions 
            {
              List<ObserverBoolExpr> RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverBoolExpr> lst = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Trigger ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              ObserverBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		 RESULT = new ObserverBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Trigger ::= MATCH SQUAREEXPR 
            {
              ObserverBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Trigger ::= MATCH CURLYEXPR 
            {
              ObserverBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Trigger ::= MATCH STRING_LITERAL 
            {
              ObserverBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Triggers ::= 
            {
              List<ObserverBoolExpr> RESULT =null;
		 RESULT = new LinkedList<ObserverBoolExpr>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Triggers",7, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Triggers ::= Trigger Triggers 
            {
              List<ObserverBoolExpr> RESULT =null;
		ObserverBoolExpr t = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverBoolExpr> lst = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0,t); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Triggers",7, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Transition ::= Triggers ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              ObserverTransition RESULT =null;
		List<ObserverBoolExpr> triggers = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-6)).value;
		List<ObserverBoolExpr> ass = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		List<ObserverActionExpr> acts = (List<ObserverActionExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverTransition(triggers, ass, acts, follow.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transition",12, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Transitions ::= 
            {
              List<ObserverTransition> RESULT =null;
		 RESULT = new LinkedList<ObserverTransition>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Transitions ::= Transition Transitions 
            {
              List<ObserverTransition> RESULT =null;
		ObserverTransition t = (ObserverTransition)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverTransition> lst = (List<ObserverTransition>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StateDef ::= STATE IDENTIFIER COLON Transitions 
            {
              ObserverInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		List<ObserverTransition> ts = (List<ObserverTransition>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverInternalState(id.toString(), ts); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDef",11, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StateDefs ::= 
            {
              List<ObserverInternalState> RESULT =null;
		 RESULT = new LinkedList<ObserverInternalState>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StateDefs ::= StateDef StateDefs 
            {
              List<ObserverInternalState> RESULT =null;
		ObserverInternalState s = (ObserverInternalState)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverInternalState> lst = (List<ObserverInternalState>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              ObserverVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-3)).value;
		ObserverIntExpr.Constant ci = (ObserverIntExpr.Constant)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverVariable(type.toString(), name.toString()); RESULT.setValue(ci.eval()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              ObserverVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverVariable(type.toString(), name.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LocalDefs ::= 
            {
              Map<String,ObserverVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, ObserverVariable>(); */ 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,ObserverVariable> RESULT =null;
		ObserverVariable d = (ObserverVariable)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		Map<String,ObserverVariable> lst = (Map<String,ObserverVariable>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("InitDef",2, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= LocalDefs InitDef StateDefs 
            {
              ObserverAutomaton RESULT =null;
		Map<String,ObserverVariable> vars = (Map<String,ObserverVariable>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverInternalState> states = (List<ObserverInternalState>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverAutomaton(vars, states, init, parser.logger); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Body",3, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Naming ::= AUTOMATON IDENTIFIER 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Naming",1, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= Body 
            {
              ObserverAutomaton RESULT =null;
		ObserverAutomaton b = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		ObserverAutomaton start_val = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		RESULT = start_val;
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ObserverParser$parser.done_parsing();
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Naming Body 
            {
              ObserverAutomaton RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		ObserverAutomaton b = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 b.setName(n); RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$ObserverParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

