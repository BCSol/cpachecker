
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 08 12:49:29 CEST 2010
//----------------------------------------------------

package cpa.observeranalysis;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import cpa.common.LogManager;
import java.util.logging.Level;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 08 12:49:29 CEST 2010
  */
@SuppressWarnings(value = { "all" }) public  class ObserverParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ObserverParser() {super();}

  /** Constructor which sets the default scanner. */
  public ObserverParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ObserverParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\005\005\000\002\004\006" +
    "\000\002\006\004\000\002\006\002\000\002\014\006\000" +
    "\002\014\010\000\002\007\004\000\002\007\002\000\002" +
    "\015\006\000\002\010\004\000\002\010\002\000\002\016" +
    "\011\000\002\011\003\000\002\012\004\000\002\012\002" +
    "\000\002\020\004\000\002\013\004\000\002\013\002\000" +
    "\002\021\006\000\002\021\004\000\002\021\004\000\002" +
    "\023\003\000\002\023\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\022\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\005\000\002\017\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\014\006\015\005\016\ufffa\001\002\000" +
    "\004\002\144\001\002\000\004\027\136\001\002\000\004" +
    "\027\135\001\002\000\006\015\005\016\ufffa\001\002\000" +
    "\006\015\005\016\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\016\013\001\002\000\004\017\130\001\002\000" +
    "\006\002\ufff6\017\017\001\002\000\004\002\ufffd\001\002" +
    "\000\006\002\ufff6\017\017\001\002\000\004\027\020\001" +
    "\002\000\004\011\021\001\002\000\026\002\ufff3\004\033" +
    "\012\022\017\ufff3\021\023\023\035\027\034\030\040\036" +
    "\024\037\031\001\002\000\022\004\033\012\022\021\023" +
    "\023\035\027\034\030\040\036\024\037\031\001\002\000" +
    "\012\022\117\040\121\041\122\042\120\001\002\000\026" +
    "\005\uffe2\006\uffe2\007\uffe2\013\uffe2\020\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\031\uffe2\033\uffe2\001\002\000\032\005\uffe8" +
    "\006\uffe8\007\uffe8\013\uffe8\020\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000\004" +
    "\007\074\001\002\000\026\002\ufff3\004\033\012\022\017" +
    "\ufff3\021\023\023\035\027\034\030\040\036\024\037\031" +
    "\001\002\000\012\031\062\033\063\034\060\035\061\001" +
    "\002\000\026\005\uffe1\006\uffe1\007\uffe1\013\uffe1\020\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\031\uffe1\033\uffe1\001\002\000" +
    "\014\005\050\006\053\007\ufff1\031\051\033\052\001\002" +
    "\000\022\004\033\012\022\021\023\023\035\027\034\030" +
    "\040\036\024\037\031\001\002\000\032\005\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\020\uffe6\024\uffe6\025\uffe6\026\uffe6\031" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\004\012\041" +
    "\001\002\000\026\005\uffd8\006\uffd8\007\uffd8\013\uffd8\020" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\033\uffd8\001\002" +
    "\000\006\002\ufff5\017\ufff5\001\002\000\034\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\013\uffe3\020\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000" +
    "\004\027\042\001\002\000\004\012\043\001\002\000\004" +
    "\040\044\001\002\000\004\013\045\001\002\000\004\013" +
    "\046\001\002\000\026\005\uffd3\006\uffd3\007\uffd3\013\uffd3" +
    "\020\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3\033\uffd3\001" +
    "\002\000\026\005\uffe0\006\uffe0\007\uffe0\013\uffe0\020\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\031\uffe0\033\uffe0\001\002\000" +
    "\022\004\033\012\022\021\023\023\035\027\034\030\040" +
    "\036\024\037\031\001\002\000\022\004\033\012\022\021" +
    "\023\023\035\027\034\030\040\036\024\037\031\001\002" +
    "\000\022\004\033\012\022\021\023\023\035\027\034\030" +
    "\040\036\024\037\031\001\002\000\022\004\033\012\022" +
    "\021\023\023\035\027\034\030\040\036\024\037\031\001" +
    "\002\000\026\005\uffd9\006\uffd9\007\uffd9\013\uffd9\020\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\031\051\033\052\001\002\000" +
    "\026\005\uffdc\006\uffdc\007\uffdc\013\uffdc\020\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\031\uffdc\033\uffdc\001\002\000\026\005" +
    "\uffdb\006\uffdb\007\uffdb\013\uffdb\020\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\031\uffdb\033\uffdb\001\002\000\026\005\uffda\006" +
    "\uffda\007\uffda\013\uffda\020\uffda\024\uffda\025\uffda\026\uffda" +
    "\031\051\033\052\001\002\000\010\012\064\027\034\030" +
    "\040\001\002\000\010\012\064\027\034\030\040\001\002" +
    "\000\010\012\064\027\034\030\040\001\002\000\010\012" +
    "\064\027\034\030\040\001\002\000\010\012\064\027\034" +
    "\030\040\001\002\000\032\005\uffde\006\uffde\007\uffde\013" +
    "\uffde\020\uffde\024\uffde\025\uffde\026\uffde\031\uffde\033\uffde" +
    "\034\060\035\061\001\002\000\010\013\067\034\060\035" +
    "\061\001\002\000\032\005\uffe7\006\uffe7\007\uffe7\013\uffe7" +
    "\020\uffe7\024\uffe7\025\uffe7\026\uffe7\031\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\001\002\000\032\005\uffdd\006\uffdd\007\uffdd" +
    "\013\uffdd\020\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd\033" +
    "\uffdd\034\060\035\061\001\002\000\032\005\uffe4\006\uffe4" +
    "\007\uffe4\013\uffe4\020\uffe4\024\uffe4\025\uffe4\026\uffe4\031" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\032\005\uffe5" +
    "\006\uffe5\007\uffe5\013\uffe5\020\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\006" +
    "\002\ufff4\017\ufff4\001\002\000\012\020\077\024\uffef\025" +
    "\uffef\026\uffef\001\002\000\012\020\077\024\uffef\025\uffef" +
    "\026\uffef\001\002\000\010\024\101\025\102\026\uffec\001" +
    "\002\000\022\004\033\012\022\021\023\023\035\027\034" +
    "\030\040\036\024\037\031\001\002\000\022\005\050\006" +
    "\053\020\uffee\024\uffee\025\uffee\026\uffee\031\051\033\052" +
    "\001\002\000\004\027\113\001\002\000\012\012\064\027" +
    "\034\030\040\040\111\001\002\000\010\024\101\025\102" +
    "\026\uffec\001\002\000\004\026\105\001\002\000\004\027" +
    "\106\001\002\000\004\010\107\001\002\000\026\002\ufff2" +
    "\004\ufff2\012\ufff2\017\ufff2\021\ufff2\023\ufff2\027\ufff2\030" +
    "\ufff2\036\ufff2\037\ufff2\001\002\000\004\026\uffed\001\002" +
    "\000\010\024\uffea\025\uffea\026\uffea\001\002\000\014\024" +
    "\uffe9\025\uffe9\026\uffe9\034\060\035\061\001\002\000\004" +
    "\032\114\001\002\000\010\012\064\027\034\030\040\001" +
    "\002\000\014\024\uffeb\025\uffeb\026\uffeb\034\060\035\061" +
    "\001\002\000\010\024\ufff0\025\ufff0\026\ufff0\001\002\000" +
    "\004\042\123\001\002\000\026\005\uffd5\006\uffd5\007\uffd5" +
    "\013\uffd5\020\uffd5\024\uffd5\025\uffd5\026\uffd5\031\uffd5\033" +
    "\uffd5\001\002\000\026\005\uffd7\006\uffd7\007\uffd7\013\uffd7" +
    "\020\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\033\uffd7\001" +
    "\002\000\026\005\uffd6\006\uffd6\007\uffd6\013\uffd6\020\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\031\uffd6\033\uffd6\001\002\000" +
    "\026\005\uffd4\006\uffd4\007\uffd4\013\uffd4\020\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\031\uffd4\033\uffd4\001\002\000\014\013" +
    "\067\031\062\033\063\034\060\035\061\001\002\000\014" +
    "\005\050\006\053\013\126\031\051\033\052\001\002\000" +
    "\026\005\uffdf\006\uffdf\007\uffdf\013\uffdf\020\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\031\uffdf\033\uffdf\001\002\000\004\002" +
    "\ufff7\001\002\000\004\027\131\001\002\000\004\010\132" +
    "\001\002\000\006\002\ufffc\017\ufffc\001\002\000\004\016" +
    "\ufffb\001\002\000\004\002\001\001\002\000\006\015\ufffe" +
    "\016\ufffe\001\002\000\004\027\137\001\002\000\006\010" +
    "\141\032\140\001\002\000\004\030\040\001\002\000\006" +
    "\015\ufff9\016\ufff9\001\002\000\004\010\143\001\002\000" +
    "\006\015\ufff8\016\ufff8\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\014\002\003\003\006\005\010\006\011\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\133\006\011\014\007\001\001\000" +
    "\006\006\132\014\007\001\001\000\002\001\001\000\004" +
    "\004\013\001\001\000\002\001\001\000\006\007\014\015" +
    "\015\001\001\000\002\001\001\000\006\007\126\015\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\036\011\025\016\026\017\035\022\024\023\027\024\031" +
    "\001\001\000\012\017\035\022\024\023\123\024\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\072\011\025\016\026\017" +
    "\035\022\024\023\027\024\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\035\022" +
    "\024\023\027\024\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\035\022\024\023\027\024\056" +
    "\001\001\000\012\017\035\022\024\023\027\024\055\001" +
    "\001\000\012\017\035\022\024\023\027\024\054\001\001" +
    "\000\012\017\035\022\024\023\027\024\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\024\023\071\001\001\000\006\022" +
    "\024\023\070\001\001\000\006\022\024\023\067\001\001" +
    "\000\006\022\024\023\064\001\001\000\006\022\024\023" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\075\020\074\001\001" +
    "\000\006\012\115\020\074\001\001\000\006\013\103\021" +
    "\102\001\001\000\012\017\035\022\024\023\027\024\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\024\023\111\001\001\000\006\013\107\021\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\024\023\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ObserverParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ObserverParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ObserverParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.) 
   */
  protected Map<String, ObserverVariable> variablesMap = new HashMap<String, ObserverVariable>();
  public boolean syntaxErrors;
  ObserverScanner scanner;
  LogManager logger;

  public ObserverParser(ObserverScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
  }
  
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + "ScannerLine: " + (scanner.getLine()+1) + " ScannerColumn: " + scanner.getColumn();
    
    if (info instanceof Symbol) { 
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 )) 
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.FINER, errorString);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$ObserverParser$actions {
  private final ObserverParser parser;

  /** Constructor */
  CUP$ObserverParser$actions(ObserverParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ObserverParser$do_action(
    int                        CUP$ObserverParser$act_num,
    java_cup.runtime.lr_parser CUP$ObserverParser$parser,
    java.util.Stack            CUP$ObserverParser$stack,
    int                        CUP$ObserverParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ObserverParser$result;

      /* select the action based on the action number */
      switch (CUP$ObserverParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Trigger ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              ObserverBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		 RESULT = new ObserverBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Trigger ::= MATCH LABEL SQUAREEXPR 
            {
              ObserverBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Trigger ::= MATCH SQUAREEXPR 
            {
              ObserverBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Trigger ::= MATCH CURLYEXPR 
            {
              ObserverBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Trigger ::= MATCH STRING_LITERAL 
            {
              ObserverBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Trigger",13, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool ::= Trigger 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr t = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool ::= Bool OR Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.Or(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool ::= Bool AND Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.And(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bool ::= Bool NEQ Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.BoolNotEqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bool ::= Bool EQEQ Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.BoolEqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bool ::= Int NEQ Int 
            {
              ObserverBoolExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.IntNotEqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bool ::= Int EQEQ Int 
            {
              ObserverBoolExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.IntEqTest(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bool ::= EXCLAMATION Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverBoolExpr.Negation(b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bool ::= FALSE 
            {
              ObserverBoolExpr RESULT =null;
		 RESULT = new ObserverBoolExpr.False(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bool ::= TRUE 
            {
              ObserverBoolExpr RESULT =null;
		 RESULT = new ObserverBoolExpr.True(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Bool",18, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstantInt ::= INTEGER_LITERAL 
            {
              ObserverIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Constant(c.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",16, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Int ::= Int MINUS Int 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Minus(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Int ::= Int PLUS Int 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr a = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr b = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.Plus(a,b); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Int ::= IDENTIFIER 
            {
              ObserverIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverIntExpr.VarAccess(x.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr i = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = i; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Int ::= ConstantInt 
            {
              ObserverIntExpr RESULT =null;
		ObserverIntExpr.Constant c = (ObserverIntExpr.Constant)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Int",17, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Action ::= PRINT Int 
            {
              ObserverActionExpr RESULT =null;
		ObserverIntExpr int_expr = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.PrintInt(int_expr); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Action ::= PRINT STRING_LITERAL 
            {
              ObserverActionExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.Print(lit.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Action ::= DO IDENTIFIER EQ Int 
            {
              ObserverActionExpr RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		ObserverIntExpr i = (ObserverIntExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverActionExpr.Assignment(var.toString(), i); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Actions ::= 
            {
              List<ObserverActionExpr> RESULT =null;
		 RESULT = new LinkedList<ObserverActionExpr>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Actions ::= Action Actions 
            {
              List<ObserverActionExpr> RESULT =null;
		ObserverActionExpr a = (ObserverActionExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverActionExpr> lst = (List<ObserverActionExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Assertion ::= ASS Bool 
            {
              ObserverBoolExpr RESULT =null;
		ObserverBoolExpr b = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertion",14, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Assertions ::= 
            {
              List<ObserverBoolExpr> RESULT =null;
		 RESULT = new LinkedList<ObserverBoolExpr>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Assertions ::= Assertion Assertions 
            {
              List<ObserverBoolExpr> RESULT =null;
		ObserverBoolExpr a = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverBoolExpr> lst = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Triggers ::= Bool 
            {
              List<ObserverBoolExpr> RESULT =null;
		ObserverBoolExpr t = (ObserverBoolExpr)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = Collections.singletonList(t); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Triggers",7, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Transition ::= Triggers ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              ObserverTransition RESULT =null;
		List<ObserverBoolExpr> triggers = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-6)).value;
		List<ObserverBoolExpr> ass = (List<ObserverBoolExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		List<ObserverActionExpr> acts = (List<ObserverActionExpr>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverTransition(triggers, ass, acts, follow.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transition",12, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Transitions ::= 
            {
              List<ObserverTransition> RESULT =null;
		 RESULT = new LinkedList<ObserverTransition>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Transitions ::= Transition Transitions 
            {
              List<ObserverTransition> RESULT =null;
		ObserverTransition t = (ObserverTransition)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverTransition> lst = (List<ObserverTransition>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Transitions",6, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StateDef ::= STATE IDENTIFIER COLON Transitions 
            {
              ObserverInternalState RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		List<ObserverTransition> ts = (List<ObserverTransition>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverInternalState(id.toString(), ts); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDef",11, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StateDefs ::= 
            {
              List<ObserverInternalState> RESULT =null;
		 RESULT = new LinkedList<ObserverInternalState>(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StateDefs ::= StateDef StateDefs 
            {
              List<ObserverInternalState> RESULT =null;
		ObserverInternalState s = (ObserverInternalState)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverInternalState> lst = (List<ObserverInternalState>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("StateDefs",5, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              ObserverVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-3)).value;
		ObserverIntExpr.Constant ci = (ObserverIntExpr.Constant)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverVariable(type.toString(), name.toString()); RESULT.setValue(ci.eval()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              ObserverVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = new ObserverVariable(type.toString(), name.toString()); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LocalDefs ::= 
            {
              Map<String,ObserverVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, ObserverVariable>(); */ 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,ObserverVariable> RESULT =null;
		ObserverVariable d = (ObserverVariable)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		Map<String,ObserverVariable> lst = (Map<String,ObserverVariable>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",4, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("InitDef",2, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= LocalDefs InitDef StateDefs 
            {
              ObserverAutomaton RESULT =null;
		Map<String,ObserverVariable> vars = (Map<String,ObserverVariable>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-2)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		List<ObserverInternalState> states = (List<ObserverInternalState>)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = new ObserverAutomaton(vars, states, init, parser.logger); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Body",3, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Naming ::= AUTOMATON IDENTIFIER 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("Naming",1, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= Body 
            {
              ObserverAutomaton RESULT =null;
		ObserverAutomaton b = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		ObserverAutomaton start_val = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		RESULT = start_val;
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ObserverParser$parser.done_parsing();
          return CUP$ObserverParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Naming Body 
            {
              ObserverAutomaton RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.elementAt(CUP$ObserverParser$top-1)).value;
		ObserverAutomaton b = (ObserverAutomaton)((java_cup.runtime.Symbol) CUP$ObserverParser$stack.peek()).value;
		 b.setName(n); RESULT = b; 
              CUP$ObserverParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$ObserverParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

