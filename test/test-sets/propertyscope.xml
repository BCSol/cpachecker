<?xml version="1.0"?>
<!DOCTYPE benchmark PUBLIC "+//IDN sosy-lab.org//DTD BenchExec benchmark 1.0//EN" "http://www.sosy-lab.org/benchexec/benchmark-1.0.dtd">
<benchmark tool="cpachecker" timelimit="1300 s" hardtimelimit="1600 s" memlimit="15 GB"
           cpuCores="4">
  <rundefinition name="base">
  </rundefinition>


    <resultfiles>**prop_scope_callgraph*.graphml</resultfiles>
    <rundefinition name="output">

    </rundefinition>

    <rundefinition name="output_no_basic_blocks">
      <option name="-setprop">cpa.composite.aggregateBasicBlocks=false</option>

  </rundefinition>

  <rundefinition name="onlynewentry">
      <option name="-setprop">cpa.predicate.propertyscope.onlyFindNewEntryFunction=true</option>
      <option name="-noout"/>
  </rundefinition>

  <rundefinition name="loc_inst">
    <option name="-setprop">cpa.predicate.precision.sharing=LOCATION_INSTANCE</option>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="DOMAIN_MIN-WIDTH_MIN-LENGTH_MIN">
      <option name="-setprop">cpa.predicate.blk.useCache=false</option>
      <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
      <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
      <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
      <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
      <option name="-setprop">analysis.checkCounterexamples=false</option>
      <option name="-setprop">cpa.predicate.refinement.prefixPreference=DOMAIN_MIN,WIDTH_MIN,LENGTH_MIN</option>
      <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
      <option name="-noout"/>

  </rundefinition>
  <rundefinition name="WIDTH_WIDTH_MIN-LOOPS_MIN">
      <option name="-setprop">cpa.predicate.blk.useCache=false</option>
      <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
      <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
      <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
      <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
      <option name="-setprop">analysis.checkCounterexamples=false</option>
      <option name="-setprop">cpa.predicate.refinement.prefixPreference=WIDTH_MIN,LOOPS_MIN</option>
      <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
      <option name="-noout"/>

  </rundefinition>

    <rundefinition name="DOMAIN_MIN-PIVOT_MAX-LENGTH_MAX-LOOPS_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=DOMAIN_MIN,PIVOT_MAX,LENGTH_MAX,LOOPS_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>

    </rundefinition>

    <rundefinition name="WIDTH_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=WIDTH_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>

    </rundefinition>

    <rundefinition name="WIDTH_MAX">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=WIDTH_MAX</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="DOMAIN_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=DOMAIN_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="DOMAIN_MAX">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=DOMAIN_MAX</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="PIVOT_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=PIVOT_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="PIVOT_MAX">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=PIVOT_MAX</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="ASSIGNMENTS_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=ASSIGNMENTS_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="ASSIGNMENTS_MAX">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=ASSIGNMENTS_MAX</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>


    <rundefinition name="ASSUMPTIONS_MAX">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=ASSUMPTIONS_MAX</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>

    <rundefinition name="ASSUMPTIONS_MIN">
        <option name="-setprop">cpa.predicate.blk.useCache=false</option>
        <option name="-setprop">cpa.predicate.abstraction.computation=CARTESIAN</option>
        <option name="-setprop">cpa.predicate.refinement.performInitialStaticRefinement=false</option>
        <option name="-setprop">cpa.predicate.refinement.restartAfterRefinements=1</option>
        <option name="-setprop">cpa.predicate.precision.sharing=GLOBAL</option>
        <option name="-setprop">analysis.checkCounterexamples=false</option>
        <option name="-setprop">cpa.predicate.refinement.prefixPreference=ASSUMPTIONS_MIN</option>
        <option name="-setprop">cpa.predicate.abstraction.identifyTrivialPredicates=false</option>
  	<option name="-noout"/>
    </rundefinition>


    <option name="-heap">12000M</option>
  <option name="-propertyScope"/>

  <propertyfile>${sourcefile_path}/ALL.prp</propertyfile>
  <!-- Witness files are several GB in total, ignore them for now.
  <resultfiles>**.graphml</resultfiles>
  -->

<!--  <tasks name="ArraysReach">
    <includesfile>../programs/benchmarks/ArraysReach.set</includesfile>
  </tasks>-->
<!--  <tasks name="ArraysMemSafety">
    <includesfile>../programs/benchmarks/ArraysMemSafety.set</includesfile>
  </tasks>-->
<!--  <tasks name="BitVectorsReach">
    <includesfile>../programs/benchmarks/BitVectorsReach.set</includesfile>
  </tasks>-->
<!--  <tasks name="BitVectorsOverflows">
    <includesfile>../programs/benchmarks/BitVectorsOverflows.set</includesfile>
    <option name="-64"/>
  </tasks>
  <tasks name="HeapReach">
    <includesfile>../programs/benchmarks/HeapReach.set</includesfile>
  </tasks>
  <tasks name="HeapMemSafety">
    <includesfile>../programs/benchmarks/HeapMemSafety.set</includesfile>
  </tasks>
  <tasks name="Floats">
    <includesfile>../programs/benchmarks/Floats.set</includesfile>
&lt;!&ndash;    <option name="-setprop">cpa.predicate.handlePointerAliasing=false</option>&ndash;&gt;
  </tasks>-->
  <tasks name="ControlFlow">
    <includesfile>../programs/benchmarks/ControlFlow.set</includesfile>
  </tasks>
  <tasks name="Simple">
    <includesfile>../programs/benchmarks/Simple.set</includesfile>
<!--    <option name="-setprop">cpa.predicate.handlePointerAliasing=false</option>-->
  </tasks>
<!--  <tasks name="ECA">
    <includesfile>../programs/benchmarks/ECA.set</includesfile>
  </tasks>-->
<!--
  <tasks name="Loops">
    <includesfile>../programs/benchmarks/Loops.set</includesfile>
-->
  <tasks name="ProductLines">
    <includesfile>../programs/benchmarks/ProductLines.set</includesfile>
  </tasks>
<!--  <tasks name="Sequentialized">
    <includesfile>../programs/benchmarks/Sequentialized.set</includesfile>
  </tasks>-->
<!--  <tasks name="Termination">
    <includesfile>../programs/benchmarks/Termination.set</includesfile>
&lt;!&ndash;    <option name="-setprop">cpa.predicate.handlePointerAliasing=false</option>&ndash;&gt;
    <option name="-64" />
  </tasks>-->
<!--  <tasks name="Concurrency">
    <includesfile>../programs/benchmarks/Concurrency.set</includesfile>
  </tasks>-->
  <tasks name="DeviceDriversLinux64">
    <includesfile>../programs/benchmarks/DeviceDriversLinux64.set</includesfile>
<!--    <option name="-setprop">cpa.predicate.handlePointerAliasing=false</option>-->
    <option name="-64"/>
  </tasks>
  <tasks name="BusyBox">
    <includesfile>../programs/benchmarks/BusyBox.set</includesfile>
    <option name="-64"/>
  </tasks>
 <columns>

    <column title="non_true_abs_func">Functions with non-true abstraction: </column>
    <column title="non_true_abs_func_cnt">Non-true abstraction function count:</column>
    <column title="total_func_cnt">Total functions:</column>
    <column title="visited_func_cnt">Visited functions:</column>
    <column title="entry_func_candidate">New entry Function Candidate:</column>
    <column title="num_global_vars_abs_formula">Number of global variables in abstraction formulas: </column>
    <column title="num_non_true_abs_states">Number of non-true abstraction states:</column>
    <column title="num_abstractions">Number of abstractions:</column>
    <column title="avg_global_var_in_abs_formula_atoms">Average ratio of formula atoms with global variable:</column>
    <column title="highest_callstack_point_non_true_abs">Highest point in callstack with non-true abstraction formula:</column>
    <column title="highest_callstack_point_non_true_abs_used">Highest point in callstack with non-true abs. and vars used in func.:</column>
    <column title="highest_callstack_point_match_only">Highest automaton match point in callstack:</column>
    <column title="highest_callstack_point_autom_fallback">Highest point in callstack with automaton fallback:</column>
    <column title="global_observer_target_reach_count">Global observer automaton reached target count:</column>
    <column title="num_trivialy_used_predicates">Number of trivially used predicates:</column>
    <column title="nontrue_true_nontrue_seq_num">NONTRUE-TRUE-NONTRUE sequences:</column>
    <column title="ext_arg_paths">Number of extracted ARG Paths:</column>
    <column title="true_tail_sum">Sum. length of paths tails until first nontrue abs. st.:</column>
    <column title="true_head_sum">Sum. length of paths heads until first nontrue abs. st.:</column>
    <column title="sum_path_length">Sum. path length:</column>
    <column title="glob_target_state_line_numbers">Global target state line numbers:</column>
    <column title="visited_lines">Visited lines:</column>
    <column title="total_lines">Total lines:</column>
    <column title="formula_atom_global_const_sum">Abs. formula atoms with global var. and constant sum:</column>
    <column title="formula_atom_global_sum">Abs. formula atoms with global variable sum:</column>
    <column title="formula_atom_sum">Abs. formula atom sum:</column>
    <column title="formula_atom_global_loop_exit_sum">Abs. formula atoms with global and loopExitCondVars sum:</column>
    <column title="formula_atom_global_loop_inc_dec_sum">Abs. formula atoms with global and loopIncDecVars sum:</column>

    <column title="abs_formula_glob_other_sw_avg">Abs formula glob->other switch avg:</column>
    <column title="abs_formula_true_glob_other_sw_avg">Abs formula TRUE->glob->other switch avg:</column>




 </columns>


</benchmark>
