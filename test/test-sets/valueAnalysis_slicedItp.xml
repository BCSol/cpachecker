<?xml version="1.0"?>
<!DOCTYPE benchmark SYSTEM "benchmark.dtd">
<benchmark tool="cpachecker" timelimit="900" hardtimelimit="930" memlimit="15000" cpuCores="2">
  <option name="-disable-java-assertions"/>
  <option name="-noout"/>
  <option name="-setprop">log.consoleLevel=WARNING</option>
  <option name="-heap">14500M</option>
  <option name="-skipRecursion"/>

<!-- this file expects to be next to a folder named "benchmarks", with the subfolder slicedItp/svcomp14 containing the benchmarks of SV-COMP'14 -->

  <propertyfile>./benchmarks/slicedItp/svcomp14/ldv-consumption/ALL.prp</propertyfile>
  <sourcefiles name="Simple">
    <includesfile>./benchmarks/slicedItp/svcomp14/Simple.set</includesfile>
  </sourcefiles>
  <sourcefiles name="BitVectors">
    <includesfile>./benchmarks/slicedItp/svcomp14/BitVectors.set</includesfile>
  </sourcefiles>
  <sourcefiles name="ControlFlowInteger">
    <includesfile>./benchmarks/slicedItp/svcomp14/ControlFlowInteger.set</includesfile>
  </sourcefiles>
  <sourcefiles name="DeviceDrivers64">
    <includesfile>./benchmarks/slicedItp/svcomp14/DeviceDrivers64.set</includesfile>
    <option name="-64"/>
  </sourcefiles>
  <sourcefiles name="HeapManipulation">
    <includesfile>./benchmarks/slicedItp/svcomp14/HeapManipulation.set</includesfile>
  </sourcefiles>
  <sourcefiles name="Loops">
    <includesfile>./benchmarks/slicedItp/svcomp14/Loops.set</includesfile>
  </sourcefiles>
  <sourcefiles name="ProductLines">
    <includesfile>./benchmarks/slicedItp/svcomp14/ProductLines.set</includesfile>
  </sourcefiles>
  <sourcefiles name="Sequentialized">
    <includesfile>./benchmarks/slicedItp/svcomp14/Sequentialized.set</includesfile>
  </sourcefiles>

<!-- ommit these, comparring does not make sense for value-analysis
  <sourcefiles name="Concurrency"></sourcefiles>
  <sourcefiles name="MemorySafety"></sourcefiles>
  <sourcefiles name="Recursive"></sourcefiles>
-->

<!-- we use cex check, as the value analysis still is too imprecise -->
  <option name="-explicitAnalysis"/>
  <option name="-setprop">analysis.checkCounterexamples=true</option>
  <option name="-setprop">counterexample.checker=CPACHECKER</option>
  <option name="-setprop">counterexample.checker.config=config/predicateAnalysis-as-bitprecise-cex-check.properties</option>

  <rundefinition name="refinement_DEFAULT">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DEFAULT</option>
  </rundefinition>

  <rundefinition name="refinement_SHORTEST">
    <option name="-setprop">cpa.value.refiner.prefixPreference=SHORTEST</option>
  </rundefinition>

  <rundefinition name="refinement_LONGEST">
    <option name="-setprop">cpa.value.refiner.prefixPreference=LONGEST</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_BEST_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_BEST_DEEP</option>
  </rundefinition>

  <rundefinition name="refinement_REFINE_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=REFINE_DEEP</option>
  </rundefinition>

  <rundefinition name="refinement_RANDOM">
    <option name="-setprop">cpa.value.refiner.prefixPreference=RANDOM</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_WORST_SHALLOW">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_WORST_SHALLOW</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_WORST_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_WORST_DEEP</option>
  </rundefinition>
<!-- all available heuristics
  <rundefinition name="refinement_DEFAULT">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DEFAULT</option>
  </rundefinition>

  <rundefinition name="refinement_SHORTEST">
    <option name="-setprop">cpa.value.refiner.prefixPreference=SHORTEST</option>
  </rundefinition>

  <rundefinition name="refinement_LONGEST">
    <option name="-setprop">cpa.value.refiner.prefixPreference=LONGEST</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_BEST_SHALLOW">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_BEST_SHALLOW</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_BEST_BOUNDED">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_BEST_BOUNDED</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_BEST_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_BEST_DEEP</option>
  </rundefinition>

  <rundefinition name="refinement_REFINE_SHALLOW">
    <option name="-setprop">cpa.value.refiner.prefixPreference=REFINE_SHALLOW</option>
  </rundefinition>

  <rundefinition name="refinement_REFINE_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=REFINE_DEEP</option>
  </rundefinition>

  <rundefinition name="refinement_RANDOM">
    <option name="-setprop">cpa.value.refiner.prefixPreference=RANDOM</option>
  </rundefinition>

  <rundefinition name="refinement_MEDIAN">
    <option name="-setprop">cpa.value.refiner.prefixPreference=MEDIAN</option>
  </rundefinition>

  <rundefinition name="refinement_MIDDLE">
    <option name="-setprop">cpa.value.refiner.prefixPreference=MIDDLE</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_WORST_SHALLOW">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_WORST_SHALLOW</option>
  </rundefinition>

  <rundefinition name="refinement_DOMAIN_WORST_DEEP">
    <option name="-setprop">cpa.value.refiner.prefixPreference=DOMAIN_WORST_DEEP</option>
  </rundefinition>
-->
</benchmark>
