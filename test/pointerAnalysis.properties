# where to save the log file
log.path = test/CPALog.txt

# set the log level, only on, off supported currently to switch on or off
log.level = off

# do we want to print cfa as .dot, true or false
dot.export = true

# where to save the dot file
dot.path = test/graph/

# do we want to simplify cfa?
cfa.simplify = false

# run consistency checks on the cfa?
cfa.check = true

# do we want to combine multiple assignments and 
# if cpa.simplify is set to true and cfa.combineBlockStatements is set
# to false only blank edges will be removed while simplfying

cfa.combineBlockStatements = false

# set to true if you want to run an interprocedural analysis
analysis.interprocedural = true
analysis.useSummaryLocations = false
analysis.useGlobalVars = true
# true if we want to use block edges
analysis.useBlockEdges = false
analysis.useSummaryLocations = false

# if true, don't create call/return edges for external function calls
analysis.noExternalCalls = true

# don't use a composite CPA
analysis.noCompositeCPA = false

# where are predicates
#predicates.path = /home/erkan/cpa/predicates/

# entry function
analysis.entryFunction = main
    
# which strategy to adopt for visiting states? DFS or BFS? BFS, unless
# bfs is false
analysis.topSort = false
analysis.bfs = false

# where to keep the programs to run, this is the workspacedata if
# you use eclipse to run CPAChecker. if it changes, you should change this
# parameter.
#analysis.programs = /home/erkan/cpa/tests/

# which CPAs do we want to use? where is the CPA class that represents the corresponding analysis?
analysis.cpas = cpa.location.LocationCPA, cpa.types.TypesCPA, cpa.explicit.ExplicitAnalysisCPA, cpa.pointeranalysis.PointerAnalysisCPA

# what merge operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for MergeSep and join for MergeJoin
analysis.mergeOperators = sep, join, sep, sep

# what stop operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for StopSep and join for StopJoin
analysis.stopOperators = sep, join, sep, sep

# if true, don't print the set of reachable states at the end of the analysis
analysis.dontPrintReachableStates = false

# if true, perform a (very) simple "cone-of-influence" reduction, to get rid
# of all the nodes and edges that are not reachable from the error locations
cfa.removeIrrelevantForErrorLocations = false

# use location mapped reached set
cpa.useSpecializedReachedSet = true

# print a warning whenever a dangerous pointer operation is executed
pointerAnalysis.printWarnings = true

explicitAnalysis.threshold = 10
