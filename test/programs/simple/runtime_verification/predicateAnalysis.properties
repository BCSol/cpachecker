# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

analysis.traversal.order = bfs
analysis.traversal.useCallstack = true
analysis.traversal.useReversePostorder = true

analysis.useRefinement = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA

# FunctionPointerCPA provides handling of function pointers
ARGCPA.cpa = cpa.functionpointer.FunctionPointerCPA

FunctionPointerCPA.cpa = cpa.composite.CompositeCPA

#CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.explicit.ExplicitCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA

cpa.predicate.blk.alwaysAtFunctions    = false
cpa.predicate.blk.alwaysAtLoops        = true
cpa.predicate.blk.alwaysAtEndOfProgram = true
#cpa.predicate.blk.threshold = 1

analysis.entryFunction = entry
#cpa.explicit.variableBlacklist = (?!.*__MONITOR_STATE).*
#cpa.explicit.threshold = 200000

#cegar.stopRefiningThreshold = 1500
analysis.contiuneOnCounterexample = true
analysis.pruneUnrefinedARG = true
cegar.noRefinementInFirstRun = true
#analysis.postProcessing = false
#cegar.stopRefiningThreshold = 150
#analysis.contiuneOnCounterexample = true
analysis.postProcessing = true
#cpa.predicate.abstraction.initialPredicates = test/programs/simple/runtime_verification/complexautomaton/preds

# debugging
#reachedSet.export = true
#reachedSet.file = reached.txt

cpa.arg.export = true
cpa.arg.file = ARG.dot
cpa.arg.dumpARG = true

#log.level = ALL

cpa.predicate.nondetFunctions = ssl3_send_hello_request, ssl3_send_finished, ssl3_send_change_cipher_spec, ssl3_get_finished, ssl3_get_cert_verify, ssl3_get_client_key_exchange, ssl3_get_client_certificate, ssl3_check_client_hello, ssl3_send_server_done, ssl3_send_certificate_request, ssl3_send_server_key_exchange, ssl3_send_server_certificate, ssl3_send_server_hello, ssl3_get_client_hello, ssl_init_wbio_buffer, ssl3_setup_buffers, ssl3_init_finished_mac, malloc, __kmalloc, kzalloc, sscanf, int_nondet, nondet_int, random, __VERIFIER_nondet_int, __VERIFIER_nondet_pointer, __VERIFIER_nondet_short, __VERIFIER_nondet_char, __VERIFIER_nondet_float, ssl3_client_hello, ssl3_get_server_hello, ssl3_get_server_certificate, ssl3_get_key_exchange, ssl3_get_certificate_request, ssl3_get_server_done, ssl3_send_client_certificate, ssl3_send_client_key_exchange, ssl3_send_client_verify, BIO_flush
#log.level = ALL
