<?xml version="1.0"?>
<!DOCTYPE benchmark SYSTEM "benchmark.dtd">
<benchmark tool="cpachecker" timelimit="1000" cpuCores="4">
  <option name="-disable-java-assertions"/>
  <option name="-noout"/>
  <option name="-nolog"/>
  <option name="-setprop">statistics.memory=false</option>
  <option name="-setprop">analysis.postProcessing=false</option>
  <option name="-setprop">cpa.apron.splitDisequalities=false</option>
  <option name="-setprop">cpa.predicate.solver=MATHSAT5</option>


<rundefinition name="CPA1+CPA2_Analysis">
	<option name="-setprop">enabledanalysis.allowLazyRefinement=false</option>
   <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis ARG PCC">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.arg.ARG_CPAStrategy</option>
	<option name="-setprop">enabledanalysis.allowLazyRefinement=false</option>
  <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis reached set PCC">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.ReachedSetStrategy</option>
	<option name="-setprop">enabledanalysis.allowLazyRefinement=false</option>
   <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis partial partitioned reached set PCC 10">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.partitioning.useGraphSizeToComputePartitionNumber=true</option>
<option name="-setprop">pcc.partitioning.maxNumElemsPerPartition=10</option>
	<option name="-setprop">enabledanalysis.allowLazyRefinement=false</option>
  <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis regression verification">
	<option name="-setprop">enabledanalysis.allowLazyRefinement=false</option>
   <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
  </rundefinition>
 
<rundefinition name="CPA2 Analysis transformed program">	
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_locks.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_token_ring03.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_mem_slave_tlm.1.L.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_s3_srvr.PL.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_s3_srvr.AL.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_transmitter01.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_transmitter02.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_token_ring02.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_token_ring04.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_transmitter03.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_floppy_simpl3.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_kbfiltr_simpl2.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_kbfiltr_simpl1.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_pipeline.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_pipeline2.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_s3_srvr.AU.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_kundu_uninit_a.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_kundu_uninit_b.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_s3_srvr.VU.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_condsum.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_SLR.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_fac_negsum.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_test_locks_7.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_test_locks_8.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_inf4.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_SLRb.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_SLR.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_inf6.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_test_locks_5.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_kbfiltr_simpl1.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_kbfiltr_simpl2.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_mem_slave_tlm.1.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_mem_slave_tlm.2.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_test_locks_6.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/transformed_encode_ie_nosprintf.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_encode_ie_interproc.P.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_NetBSD_anyMeta.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_encode_ie_interproc.A.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_SpamAssassin.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/transformed_sendmail_fromqp.c</include>
  </sourcefiles>
</rundefinition>

<rundefinition name="CPA1+CPA2_Analysis Lazy">
   <option name="-setprop">enabledanalysis.allowLazyRefinement=true</option>
   <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis Lazy ARG PCC">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.arg.ARG_CPAStrategy</option>
   <option name="-setprop">enabledanalysis.allowLazyRefinement=true</option>
   <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.arg.ARGCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis Lazy reached set PCC">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.ReachedSetStrategy</option>
   <option name="-setprop">enabledanalysis.allowLazyRefinement=true</option>
   <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis Lazy partial partitioned reached set PCC 10">
<option name="-setprop">pcc.proofFile=arg.obj</option>
<option name="-setprop">cpa.propertychecker.className=org.sosy_lab.cpachecker.pcc.propertychecker.NoTargetStateChecker</option>
<option name="-setprop">pcc.partitioning.useGraphSizeToComputePartitionNumber=true</option>
<option name="-setprop">pcc.partitioning.maxNumElemsPerPartition=10</option>
   <option name="-setprop">enabledanalysis.allowLazyRefinement=true</option>
   <sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <include>locks.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <include>token_ring.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.01.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <include>token_ring.02.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <include>token_ring.04.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <include>transmitter.03.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>floppy_simpl3.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>pipeline2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_a.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>kundu_uninit_b.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <include>s3_srvr.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <include>condsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <include>fac_negsum.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <include>test_locks_7.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <include>test_locks_8.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <include>inf4.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLRb.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <include>SLR.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <include>inf6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <include>test_locks_5.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <include>kbfiltr_simpl2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.1.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <include>mem_slave_tlm.2.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <include>test_locks_6.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_nosprintf.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=ARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.PartitionedReachedSetStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.stop=SEPPCC</option>
<option name="-setprop">cpa.predicate.satCheckAtAbstraction=true</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <include>NetBSD_anyMeta.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <include>encode_ie_interproc.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <include>SpamAssassin.cil.c</include>
</sourcefiles>
	<sourcefiles>
<option name="-setprop">pcc.proofgen.doPCC=true</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">pcc.partial.certificateType=MONOTONESTOPARG</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">analysis.algorithm.proofCheck=true</option>
<option name="-setprop">cpa=cpa.PropertyChecker.PropertyCheckerCPA</option>
<option name="-setprop">PropertyCheckerCPA.cpa=cpa.composite.CompositeCPA</option>
<option name="-setprop">pcc.strategy=org.sosy_lab.cpachecker.pcc.strategy.parallel.interleaved.PartialReachedSetIOCheckingOnlyInterleavedStrategy</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.initialPrecisionType=STATIC_FULL</option>
<option name="-setprop">cpa.callstack.domain=FLATPCC</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <include>sendmail_fromqp.cil.c</include>
</sourcefiles>
  </rundefinition>

<rundefinition name="CPA1+CPA2_Analysis Lazy regression verification">
   <option name="-setprop">enabledanalysis.allowLazyRefinement=true</option>
   <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>locks.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.01.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transmitter.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.02.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>token_ring.04.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transmitter.03.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>floppy_simpl3.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>pipeline2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kundu_uninit_a.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kundu_uninit_b.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>s3_srvr.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>condsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>fac_negsum.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_7.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>test_locks_8.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf4.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SLRb.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>SLR.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
<option name="-setprop">cpa.value.precisionFile=valuePrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.value.initialPrecisionFile=output/valuePrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Value+Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>inf6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <include>test_locks_5.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>kbfiltr_simpl1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>kbfiltr_simpl2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.1.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>mem_slave_tlm.2.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>test_locks_6.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <include>encode_ie_nosprintf.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=false</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
<option name="-setprop">cpa.predicate.predmap.file=predmap.txt</option>
<option name="-setprop">cpa.predicate.predmap.export=true</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.predicate.abstraction.initialPredicates=output/predmap.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Predicate+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">cpa.predicate.blk.alwaysAtJoin=true</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>NetBSD_anyMeta.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>encode_ie_interproc.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>SpamAssassin.cil.c</include>
	</sourcefiles>
	<sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
<option name="-setprop">cpa.apron.precisionFile=octagonPrec.txt</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
<sourcefiles>
<option name="-setprop">cpa.apron.initialPrecisionFile=output/octagonPrec.txt</option>
	  <option name="-config">test/programs/programs-from-proofs/config/Apron+Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>sendmail_fromqp.cil.c</include>
	</sourcefiles>	
  </rundefinition>

<rundefinition name="CPA2 Analysis transformed lazy program">
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/locks_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_locks.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring03.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_token_ring03.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/memslave_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_mem_slave_tlm.1.L.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_s3_srvr.PL.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/ssh_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_s3_srvr.AL.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_transmitter01.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_transmitter02.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring02.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_token_ring02.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/tokenring04.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_token_ring04.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Location.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/transmitter_ops.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_transmitter03.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_floppy_simpl3.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_kbfiltr_simpl2.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_kbfiltr_simpl1.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_pipeline.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_pipeline2.U.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_s3_srvr.AU.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_kundu_uninit_a.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_kundu_uninit_b.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/UninitVars.properties</option>	  
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_s3_srvr.VU.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_condsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_condsum.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_SLR.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_fac_negsum.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_fac_negsum.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks7.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_test_locks_7.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_test_locks8.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_test_locks_8.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf4.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_inf4.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_SLRb.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_SLR_SLRb.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_SLR.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Sign.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Sign_inf6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_inf6.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks5.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_test_locks_5.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_kbfiltr_simpl1.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_ntdrivers.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_kbfiltr_simpl2.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_mem_slave_tlm.1.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_memslave.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_mem_slave_tlm.2.V.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Value.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Value_test_locks6.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_test_locks_6.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_encode_ie_nosprintf.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_encode_ie_interproc.P.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_NetBSD_anyMeta.spc</option>
	  <option name="-setprop">analysis.traversal.order=bfs</option>
	  <include>transformed/lazy/transformedlazy_NetBSD_anyMeta.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_encode.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_encode_ie_interproc.A.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_SpamAssassin.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_SpamAssassin.c</include>
  </sourcefiles>
  <sourcefiles>
	  <option name="-config">test/programs/programs-from-proofs/config/Interval.properties</option>
	  <option name="-setprop">specification=test/programs/programs-from-proofs/specification/Interval_sendmail_fromqp.spc</option>
	  <option name="-setprop">analysis.traversal.order=dfs</option>
	  <include>transformed/lazy/transformedlazy_sendmail_fromqp.c</include>
  </sourcefiles>
</rundefinition>   

<columns>
<column title="Total time">Total time for CPAchecker</column>
<column title="Set up time">Time for analysis setup</column>
<column title="Parse time">Time for CFA construction</column>
<column title="Analysis time">Time for Analysis</column>
<column title="Precision read time">Initial precision read time</column>
<column title="Proof check time">Total time for proof check algorithm</column>
<column title="#Proof elements">Number of proof elements</column>
<column title="#Refine">Number of refinements</column>
<column title="#Loc">Number of program locations</column>
<column title="memory heap">Used heap memory</column>
<column title="memory non-heap">Used non-heap memory</column>
</columns>
</benchmark>
