Notes by Michael Tautschnig <tautschnig@forsyte.de> taken while doing the
CPA->CPA+ transition (2008-12-12):

* a cleanup and prioritization will follow *

- Remove getAbstractDomain in those cases where it is now not needed anymore

- We have multiple implementations of a class Path

- SymbPredAbstTransfer has its own Top/Bottom element !?

- Whitespace at the end of a line is undesirable for merging tools, do a cleanup

- Instead of the String parameters to set sep or join for merge and stop just
  create multiple CPA classes that fix the operator

- Review src/cfa/objectmodel/AbstractCFAEdge.java, because
  ntdrivers/cdaudio/cdaudio_simpl1.cil.c yields:
Warning: Should not have multiple jump edges leaving at line: 297
Warning: Should not have multiple jump edges leaving at line: 771
Warning: Should not have multiple jump edges leaving at line: 1232

- Use iterators instead of get(i), this is CLEANER, SAFER, and FASTER in general
  (unless impossible, of course)

- Cleanup cpa.common and move the composite stuff to compositecpa,
  CPAType.java could probably be removed rightaway

- Whenever doRefinement (of CPAAlgorithm.java) is called it will add null
  precisions to the waitlist, because RefinementNeededException does not provide
  sufficient information.

- in createReachedSet use a safe cast instead of reflection+cruel cast

- compositestop is borked (does not care about precision)

- add basic implementations of stop, mergesep/join, precision stuff
- review mergeJoin for the use of joinOperator

- cleanup stop operator, rename compositestopsep, compositemergesep

- move getInitialElement to its own class
  * method makeInitialElement (AE, AEwLoc, must be static)
  * I'd suggest introducing CPABuilder and *Builder classes that instantiate a
    CPA, know how to create proper initial elements (with or without location
    information), and do the initialPrecision stuff

- cleanup CPAMain
  * make separate function "preprocess"
  * is there any non-interprocedural analysis

- ntdrivers/cdaudio/cdaudio_simpl1.cil.c yields a wrong result when using
  cpa.symbpredabs.explicit.ExplicitCPA (delta debugging needed, r308 has a wrong
  result (UNSAFE), r170 has an assertion violation)

- ntdrivers/kbfiltr/kbfiltr_simpl1.cil.c results in an assertion violation when
  using cpa.symbpredabs.explicit.ExplicitCPA (delta debugging needed, r308 has
  ERROR, r170 is ok)

- The use of LocationMappedReachedSet in
  icpa.symbpredabs.explicit.ExplicitStopOperator is currently broken because of
  the disparity of reached vs. simpleReached; this results in a performance
  penalty of 10-20% according to recent regression testing
  -- this has been fixed in r318, but deserves further testing whether it is
  really fixed
  -- the fix in r318 was reverted in r319
  -- A possible solution introducing a wrapper class was added in
  r320-r322,r325, benchmarking is ongoing as of 2008-12-15
  -- Another possible idea is a general implementation of the ReachedSet as a
  multipmap of AbstractElements -> { Precisions }, with an additional option to
  specify a Comperator to obtain a "good" sorting of the keys. What is the
  crucial lessons we learnt while going back and forth so far:
  * The CPA+ algorithms requires that a projection of
    AbstractElements(WithLocation) is performed (efficiently)
  * If an interface "ReachedSet" is introduced somewhere take care that some
    CPAs only provide AbstractElement, not WithLocation, and if
    AbstractElementWithLocation becomes a defining part of the ReachedSet
    interface, ReachedSet cannot be used as part of each and every CPA

- Refactor the TheoremProver (and similarly named ones) interfaces and move all
  the decision procedures related stuff to its own package

